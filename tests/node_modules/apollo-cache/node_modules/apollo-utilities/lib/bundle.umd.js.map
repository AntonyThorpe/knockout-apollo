{"version":3,"file":"bundle.umd.js","sources":["../src/storeUtils.ts","../src/directives.ts","../src/fragments.ts","../src/util/assign.ts","../src/getFromAST.ts","../src/util/cloneDeep.ts","../src/transform.ts","../src/util/environment.ts","../src/util/errorHandling.ts","../src/util/isEqual.ts","../src/util/maybeDeepFreeze.ts","../src/util/warnOnce.ts"],"sourcesContent":["import {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n} from 'graphql';\n\nexport interface IdValue {\n  type: 'id';\n  id: string;\n  generated: boolean;\n  typename: string | undefined;\n}\n\nexport interface JsonValue {\n  type: 'json';\n  json: any;\n}\n\nexport type ListValue = Array<null | IdValue>;\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | IdValue\n  | ListValue\n  | JsonValue\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport type ScalarValue = StringValueNode | BooleanValueNode | EnumValueNode;\n\nexport function isScalarValue(value: ValueNode): value is ScalarValue {\n  return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\n\nexport type NumberValue = IntValueNode | FloatValueNode;\n\nexport function isNumberValue(value: ValueNode): value is NumberValue {\n  return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object,\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map(obj =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables),\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(listValue => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables,\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw new Error(`The inline argument \"${name.value}\" of kind \"${\n      (value as any).kind\n    }\" is not supported.\n                    Use variables instead of inline arguments to overcome this limitation.`);\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object,\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(directive => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables,\n          ),\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  'connection',\n  'include',\n  'skip',\n  'client',\n  'rest',\n  'export',\n];\n\nexport function getStoreKeyName(\n  fieldName: string,\n  args?: Object,\n  directives?: Directives,\n): string {\n  if (\n    directives &&\n    directives['connection'] &&\n    directives['connection']['key']\n  ) {\n    if (\n      directives['connection']['filter'] &&\n      (directives['connection']['filter'] as string[]).length > 0\n    ) {\n      const filterKeys = directives['connection']['filter']\n        ? (directives['connection']['filter'] as string[])\n        : [];\n      filterKeys.sort();\n\n      const queryArgs = args as { [key: string]: any };\n      const filteredArgs = {} as { [key: string]: any };\n      filterKeys.forEach(key => {\n        filteredArgs[key] = queryArgs[key];\n      });\n\n      return `${directives['connection']['key']}(${JSON.stringify(\n        filteredArgs,\n      )})`;\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  let completeFieldName: string = fieldName;\n\n  if (args) {\n    const stringifiedArgs: string = JSON.stringify(args);\n    completeFieldName += `(${stringifiedArgs})`;\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(key => {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += `@${key}(${JSON.stringify(directives[key])})`;\n      } else {\n        completeFieldName += `@${key}`;\n      }\n    });\n  }\n\n  return completeFieldName;\n}\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables: Object,\n): Object {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n    return argObj;\n  }\n\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === 'Field';\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode,\n): selection is InlineFragmentNode {\n  return selection.kind === 'InlineFragment';\n}\n\nexport function isIdValue(idObject: StoreValue): idObject is IdValue {\n  return idObject && (idObject as IdValue | JsonValue).type === 'id';\n}\n\nexport type IdConfig = {\n  id: string;\n  typename: string | undefined;\n};\n\nexport function toIdValue(\n  idConfig: string | IdConfig,\n  generated = false,\n): IdValue {\n  return {\n    type: 'id',\n    generated,\n    ...(typeof idConfig === 'string'\n      ? { id: idConfig, typename: undefined }\n      : idConfig),\n  };\n}\n\nexport function isJsonValue(jsonObject: StoreValue): jsonObject is JsonValue {\n  return (\n    jsonObject != null &&\n    typeof jsonObject === 'object' &&\n    (jsonObject as IdValue | JsonValue).type === 'json'\n  );\n}\n\nfunction defaultValueFromVariable(node: VariableNode) {\n  throw new Error(`Variable nodes are not supported by valueFromNode`);\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n\n/**\n * Evaluate a ValueNode and yield its value in its natural JS form.\n */\nexport function valueFromNode(\n  node: ValueNode,\n  onVariable: VariableValue = defaultValueFromVariable,\n): any {\n  switch (node.kind) {\n    case 'Variable':\n      return onVariable(node);\n    case 'NullValue':\n      return null;\n    case 'IntValue':\n      return parseInt(node.value);\n    case 'FloatValue':\n      return parseFloat(node.value);\n    case 'ListValue':\n      return node.values.map(v => valueFromNode(v, onVariable));\n    case 'ObjectValue': {\n      const value: { [key: string]: any } = {};\n      for (const field of node.fields) {\n        value[field.name.value] = valueFromNode(field.value, onVariable);\n      }\n      return value;\n    }\n    default:\n      return node.value;\n  }\n}\n","// Provides the methods that allow QueryManager to handle\r\n// the `skip` and `include` directives within GraphQL.\r\nimport {\r\n  FieldNode,\r\n  OperationDefinitionNode,\r\n  SelectionNode,\r\n  VariableNode,\r\n  BooleanValueNode,\r\n  DirectiveNode,\r\n  DocumentNode,\r\n} from 'graphql';\r\n\r\nimport { argumentsObjectFromField } from './storeUtils';\r\n\r\nexport type DirectiveInfo = {\r\n  [fieldName: string]: { [argName: string]: any };\r\n};\r\n\r\nexport function getDirectiveInfoFromField(\r\n  field: FieldNode,\r\n  variables: Object,\r\n): DirectiveInfo {\r\n  if (field.directives && field.directives.length) {\r\n    const directiveObj: DirectiveInfo = {};\r\n    field.directives.forEach((directive: DirectiveNode) => {\r\n      directiveObj[directive.name.value] = argumentsObjectFromField(\r\n        directive,\r\n        variables,\r\n      );\r\n    });\r\n    return directiveObj;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function shouldInclude(\r\n  selection: SelectionNode,\r\n  variables: { [name: string]: any } = {},\r\n): boolean {\r\n  if (!selection.directives) {\r\n    return true;\r\n  }\r\n\r\n  let res: boolean = true;\r\n  selection.directives.forEach(directive => {\r\n    // TODO should move this validation to GraphQL validation once that's implemented.\r\n    if (directive.name.value !== 'skip' && directive.name.value !== 'include') {\r\n      // Just don't worry about directives we don't understand\r\n      return;\r\n    }\r\n\r\n    //evaluate the \"if\" argument and skip (i.e. return undefined) if it evaluates to true.\r\n    const directiveArguments = directive.arguments || [];\r\n    const directiveName = directive.name.value;\r\n    if (directiveArguments.length !== 1) {\r\n      throw new Error(\r\n        `Incorrect number of arguments for the @${directiveName} directive.`,\r\n      );\r\n    }\r\n\r\n    const ifArgument = directiveArguments[0];\r\n    if (!ifArgument.name || ifArgument.name.value !== 'if') {\r\n      throw new Error(`Invalid argument for the @${directiveName} directive.`);\r\n    }\r\n\r\n    const ifValue = directiveArguments[0].value;\r\n    let evaledValue: boolean = false;\r\n    if (!ifValue || ifValue.kind !== 'BooleanValue') {\r\n      // means it has to be a variable value if this is a valid @skip or @include directive\r\n      if (ifValue.kind !== 'Variable') {\r\n        throw new Error(\r\n          `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\r\n        );\r\n      } else {\r\n        evaledValue = variables[(ifValue as VariableNode).name.value];\r\n        if (evaledValue === undefined) {\r\n          throw new Error(\r\n            `Invalid variable referenced in @${directiveName} directive.`,\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      evaledValue = (ifValue as BooleanValueNode).value;\r\n    }\r\n\r\n    if (directiveName === 'skip') {\r\n      evaledValue = !evaledValue;\r\n    }\r\n\r\n    if (!evaledValue) {\r\n      res = false;\r\n    }\r\n  });\r\n\r\n  return res;\r\n}\r\n\r\nexport function flattenSelections(selection: SelectionNode): SelectionNode[] {\r\n  if (\r\n    !(selection as FieldNode).selectionSet ||\r\n    !((selection as FieldNode).selectionSet.selections.length > 0)\r\n  )\r\n    return [selection];\r\n\r\n  return [selection].concat(\r\n    (selection as FieldNode).selectionSet.selections\r\n      .map(selectionNode =>\r\n        [selectionNode].concat(flattenSelections(selectionNode)),\r\n      )\r\n      .reduce((selections, selected) => selections.concat(selected), []),\r\n  );\r\n}\r\n\r\nconst added = new Map();\r\nexport function getDirectiveNames(doc: DocumentNode) {\r\n  const cached = added.get(doc);\r\n  if (cached) return cached;\r\n\r\n  // operation => [names of directives];\r\n  const directives = doc.definitions\r\n    .filter(\r\n      (definition: OperationDefinitionNode) =>\r\n        definition.selectionSet && definition.selectionSet.selections,\r\n    )\r\n    // operation => [[Selection]]\r\n    .map(x => flattenSelections(x as any))\r\n    // [[Selection]] => [Selection]\r\n    .reduce((selections, selected) => selections.concat(selected), [])\r\n    // [Selection] => [Selection with Directives]\r\n    .filter(\r\n      (selection: SelectionNode) =>\r\n        selection.directives && selection.directives.length > 0,\r\n    )\r\n    // [Selection with Directives] => [[Directives]]\r\n    .map((selection: SelectionNode) => selection.directives)\r\n    // [[Directives]] => [Directives]\r\n    .reduce((directives, directive) => directives.concat(directive), [])\r\n    // [Directives] => [Name]\r\n    .map((directive: DirectiveNode) => directive.name.value);\r\n\r\n  added.set(doc, directives);\r\n  return directives;\r\n}\r\n\r\nexport function hasDirectives(names: string[], doc: DocumentNode) {\r\n  return getDirectiveNames(doc).some(\r\n    (name: string) => names.indexOf(name) > -1,\r\n  );\r\n}\r\n","import { DocumentNode, FragmentDefinitionNode } from 'graphql';\r\n\r\n/**\r\n * Returns a query document which adds a single query operation that only\r\n * spreads the target fragment inside of it.\r\n *\r\n * So for example a document of:\r\n *\r\n * ```graphql\r\n * fragment foo on Foo { a b c }\r\n * ```\r\n *\r\n * Turns into:\r\n *\r\n * ```graphql\r\n * { ...foo }\r\n *\r\n * fragment foo on Foo { a b c }\r\n * ```\r\n *\r\n * The target fragment will either be the only fragment in the document, or a\r\n * fragment specified by the provided `fragmentName`. If there is more then one\r\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\r\n */\r\nexport function getFragmentQueryDocument(\r\n  document: DocumentNode,\r\n  fragmentName?: string,\r\n): DocumentNode {\r\n  let actualFragmentName = fragmentName;\r\n\r\n  // Build an array of all our fragment definitions that will be used for\r\n  // validations. We also do some validations on the other definitions in the\r\n  // document while building this list.\r\n  const fragments: Array<FragmentDefinitionNode> = [];\r\n  document.definitions.forEach(definition => {\r\n    // Throw an error if we encounter an operation definition because we will\r\n    // define our own operation definition later on.\r\n    if (definition.kind === 'OperationDefinition') {\r\n      throw new Error(\r\n        `Found a ${definition.operation} operation${\r\n          definition.name ? ` named '${definition.name.value}'` : ''\r\n        }. ` +\r\n          'No operations are allowed when using a fragment as a query. Only fragments are allowed.',\r\n      );\r\n    }\r\n    // Add our definition to the fragments array if it is a fragment\r\n    // definition.\r\n    if (definition.kind === 'FragmentDefinition') {\r\n      fragments.push(definition);\r\n    }\r\n  });\r\n\r\n  // If the user did not give us a fragment name then let us try to get a\r\n  // name from a single fragment in the definition.\r\n  if (typeof actualFragmentName === 'undefined') {\r\n    if (fragments.length !== 1) {\r\n      throw new Error(\r\n        `Found ${\r\n          fragments.length\r\n        } fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\r\n      );\r\n    }\r\n    actualFragmentName = fragments[0].name.value;\r\n  }\r\n\r\n  // Generate a query document with an operation that simply spreads the\r\n  // fragment inside of it.\r\n  const query: DocumentNode = {\r\n    ...document,\r\n    definitions: [\r\n      {\r\n        kind: 'OperationDefinition',\r\n        operation: 'query',\r\n        selectionSet: {\r\n          kind: 'SelectionSet',\r\n          selections: [\r\n            {\r\n              kind: 'FragmentSpread',\r\n              name: {\r\n                kind: 'Name',\r\n                value: actualFragmentName,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      ...document.definitions,\r\n    ],\r\n  };\r\n\r\n  return query;\r\n}\r\n","/**\r\n * Adds the properties of one or more source objects to a target object. Works exactly like\r\n * `Object.assign`, but as a utility to maintain support for IE 11.\r\n *\r\n * @see https://github.com/apollostack/apollo-client/pull/1009\r\n */\r\nexport function assign<A, B>(a: A, b: B): A & B;\r\nexport function assign<A, B, C>(a: A, b: B, c: C): A & B & C;\r\nexport function assign<A, B, C, D>(a: A, b: B, c: C, d: D): A & B & C & D;\r\nexport function assign<A, B, C, D, E>(\r\n  a: A,\r\n  b: B,\r\n  c: C,\r\n  d: D,\r\n  e: E,\r\n): A & B & C & D & E;\r\nexport function assign(target: any, ...sources: Array<any>): any;\r\nexport function assign(\r\n  target: { [key: string]: any },\r\n  ...sources: Array<{ [key: string]: any }>\r\n): { [key: string]: any } {\r\n  sources.forEach(source => {\r\n    if (typeof source === 'undefined' || source === null) {\r\n      return;\r\n    }\r\n    Object.keys(source).forEach(key => {\r\n      target[key] = source[key];\r\n    });\r\n  });\r\n  return target;\r\n}\r\n","import {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from 'graphql';\nimport { assign } from './util/assign';\n\nimport { valueToObjectRepresentation, JsonValue } from './storeUtils';\n\nexport function getMutationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode {\n  checkDocument(doc);\n\n  let mutationDef: OperationDefinitionNode | null = doc.definitions.filter(\n    definition =>\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'mutation',\n  )[0] as OperationDefinitionNode;\n\n  if (!mutationDef) {\n    throw new Error('Must contain a mutation definition.');\n  }\n\n  return mutationDef;\n}\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  if (doc.kind !== 'Document') {\n    throw new Error(`Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`);\n  }\n\n  const operations = doc.definitions\n    .filter(d => d.kind !== 'FragmentDefinition')\n    .map(definition => {\n      if (definition.kind !== 'OperationDefinition') {\n        throw new Error(\n          `Schema type definitions not allowed in queries. Found: \"${\n            definition.kind\n          }\"`,\n        );\n      }\n      return definition;\n    });\n\n  if (operations.length > 1) {\n    throw new Error(\n      `Ambiguous GraphQL document: contains ${operations.length} operations`,\n    );\n  }\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    definition => definition.kind === 'OperationDefinition',\n  )[0] as OperationDefinitionNode;\n}\n\nexport function getOperationDefinitionOrDie(\n  document: DocumentNode,\n): OperationDefinitionNode {\n  const def = getOperationDefinition(document);\n  if (!def) {\n    throw new Error(`GraphQL document is missing an operation`);\n  }\n  return def;\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        definition =>\n          definition.kind === 'OperationDefinition' && definition.name,\n      )\n      .map((x: OperationDefinitionNode) => x.name.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode,\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    definition => definition.kind === 'FragmentDefinition',\n  ) as FragmentDefinitionNode[];\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc) as OperationDefinitionNode;\n\n  if (!queryDef || queryDef.operation !== 'query') {\n    throw new Error('Must contain a query definition.');\n  }\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode,\n): FragmentDefinitionNode {\n  if (doc.kind !== 'Document') {\n    throw new Error(`Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`);\n  }\n\n  if (doc.definitions.length > 1) {\n    throw new Error('Fragment must have exactly one definition.');\n  }\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  if (fragmentDef.kind !== 'FragmentDefinition') {\n    throw new Error('Must be a fragment definition.');\n  }\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode,\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === 'OperationDefinition') {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === 'query' ||\n        operation === 'mutation' ||\n        operation === 'subscription'\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw new Error(\n    'Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.',\n  );\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = [],\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach(fragment => {\n    symTable[fragment.name.value] = fragment;\n  });\n\n  return symTable;\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined,\n): { [key: string]: JsonValue } {\n  if (\n    definition &&\n    definition.variableDefinitions &&\n    definition.variableDefinitions.length\n  ) {\n    const defaultValues = definition.variableDefinitions\n      .filter(({ defaultValue }) => defaultValue)\n      .map(({ variable, defaultValue }): { [key: string]: JsonValue } => {\n        const defaultValueObj: { [key: string]: JsonValue } = {};\n        valueToObjectRepresentation(\n          defaultValueObj,\n          variable.name,\n          defaultValue as ValueNode,\n        );\n\n        return defaultValueObj;\n      });\n\n    return assign({}, ...defaultValues);\n  }\n\n  return {};\n}\n\n/**\n * Returns the names of all variables declared by the operation.\n */\nexport function variablesInOperation(\n  operation: OperationDefinitionNode,\n): Set<string> {\n  const names = new Set<string>();\n  if (operation.variableDefinitions) {\n    for (const definition of operation.variableDefinitions) {\n      names.add(definition.variable.name.value);\n    }\n  }\n\n  return names;\n}\n","/**\r\n * Deeply clones a value to create a new instance.\r\n */\r\nexport function cloneDeep<T>(value: T): T {\r\n  // If the value is an array, create a new array where every item has been cloned.\r\n  if (Array.isArray(value)) {\r\n    return value.map(item => cloneDeep(item)) as any;\r\n  }\r\n  // If the value is an object, go through all of the object’s properties and add them to a new\r\n  // object.\r\n  if (value !== null && typeof value === 'object') {\r\n    const nextValue: any = {};\r\n    for (const key in value) {\r\n      if (value.hasOwnProperty(key)) {\r\n        nextValue[key] = cloneDeep(value[key]);\r\n      }\r\n    }\r\n    return nextValue;\r\n  }\r\n  // Otherwise this is some primitive value and it is therefore immutable so we can just return it\r\n  // directly.\r\n  return value;\r\n}\r\n","import {\n  DocumentNode,\n  SelectionNode,\n  SelectionSetNode,\n  DefinitionNode,\n  OperationDefinitionNode,\n  FieldNode,\n  DirectiveNode,\n  FragmentDefinitionNode,\n} from 'graphql';\n\nimport { cloneDeep } from './util/cloneDeep';\n\nimport {\n  checkDocument,\n  getOperationDefinitionOrDie,\n  getFragmentDefinitions,\n  createFragmentMap,\n  FragmentMap,\n} from './getFromAST';\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename',\n  },\n};\n\nfunction isNotEmpty(\n  op: OperationDefinitionNode | FragmentDefinitionNode,\n  fragments: FragmentMap,\n): Boolean {\n  // keep selections that are still valid\n  return (\n    op.selectionSet.selections.filter(\n      selectionSet =>\n        // anything that doesn't match the compound filter is okay\n        !// not an empty array\n        (\n          selectionSet &&\n          // look into fragments to verify they should stay\n          selectionSet.kind === 'FragmentSpread' &&\n          // see if the fragment in the map is valid (recursively)\n          !isNotEmpty(fragments[selectionSet.name.value], fragments)\n        ),\n    ).length > 0\n  );\n}\n\nfunction getDirectiveMatcher(\n  directives: (RemoveDirectiveConfig | GetDirectiveConfig)[],\n) {\n  return function directiveMatcher(directive: DirectiveNode): Boolean {\n    return directives.some(\n      (dir: RemoveDirectiveConfig | GetDirectiveConfig) => {\n        if (dir.name && dir.name === directive.name.value) return true;\n        if (dir.test && dir.test(directive)) return true;\n        return false;\n      },\n    );\n  };\n}\n\nfunction addTypenameToSelectionSet(\n  selectionSet: SelectionSetNode,\n  isRoot = false,\n) {\n  if (selectionSet.selections) {\n    if (!isRoot) {\n      const alreadyHasThisField = selectionSet.selections.some(selection => {\n        return (\n          selection.kind === 'Field' &&\n          (selection as FieldNode).name.value === '__typename'\n        );\n      });\n\n      if (!alreadyHasThisField) {\n        selectionSet.selections.push(TYPENAME_FIELD);\n      }\n    }\n\n    selectionSet.selections.forEach(selection => {\n      // Must not add __typename if we're inside an introspection query\n      if (selection.kind === 'Field') {\n        if (\n          selection.name.value.lastIndexOf('__', 0) !== 0 &&\n          selection.selectionSet\n        ) {\n          addTypenameToSelectionSet(selection.selectionSet);\n        }\n      } else if (selection.kind === 'InlineFragment') {\n        if (selection.selectionSet) {\n          addTypenameToSelectionSet(selection.selectionSet);\n        }\n      }\n    });\n  }\n}\n\nexport type RemoveDirectiveConfig = {\n  name?: string;\n  test?: (directive: DirectiveNode) => boolean;\n  remove?: boolean;\n};\n\nfunction removeDirectivesFromSelectionSet(\n  directives: RemoveDirectiveConfig[],\n  selectionSet: SelectionSetNode,\n): SelectionSetNode {\n  if (!selectionSet.selections) return selectionSet;\n  // if any of the directives are set to remove this selectionSet, remove it\n  const agressiveRemove = directives.some(\n    (dir: RemoveDirectiveConfig) => dir.remove,\n  );\n\n  selectionSet.selections = selectionSet.selections\n    .map(selection => {\n      if (\n        selection.kind !== 'Field' ||\n        !(selection as FieldNode) ||\n        !selection.directives\n      )\n        return selection;\n      const directiveMatcher = getDirectiveMatcher(directives);\n      let remove: boolean;\n      selection.directives = selection.directives.filter(directive => {\n        const shouldKeep = !directiveMatcher(directive);\n\n        if (!remove && !shouldKeep && agressiveRemove) remove = true;\n\n        return shouldKeep;\n      });\n\n      return remove ? null : selection;\n    })\n    .filter(x => !!x);\n\n  selectionSet.selections.forEach(selection => {\n    if (\n      (selection.kind === 'Field' || selection.kind === 'InlineFragment') &&\n      selection.selectionSet\n    ) {\n      removeDirectivesFromSelectionSet(directives, selection.selectionSet);\n    }\n  });\n\n  return selectionSet;\n}\n\nexport function removeDirectivesFromDocument(\n  directives: RemoveDirectiveConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const docClone = cloneDeep(doc);\n\n  docClone.definitions.forEach((definition: DefinitionNode) => {\n    removeDirectivesFromSelectionSet(\n      directives,\n      (definition as OperationDefinitionNode).selectionSet,\n    );\n  });\n  const operation = getOperationDefinitionOrDie(docClone);\n  const fragments = createFragmentMap(getFragmentDefinitions(docClone));\n  return isNotEmpty(operation, fragments) ? docClone : null;\n}\n\nconst added = new Map();\nexport function addTypenameToDocument(doc: DocumentNode) {\n  checkDocument(doc);\n  const cached = added.get(doc);\n  if (cached) return cached;\n\n  const docClone = cloneDeep(doc);\n\n  docClone.definitions.forEach((definition: DefinitionNode) => {\n    const isRoot = definition.kind === 'OperationDefinition';\n    addTypenameToSelectionSet(\n      (definition as OperationDefinitionNode).selectionSet,\n      isRoot,\n    );\n  });\n\n  added.set(doc, docClone);\n  return docClone;\n}\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => {\n    const willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (\n        !directive.arguments ||\n        !directive.arguments.some(arg => arg.name.value === 'key')\n      ) {\n        console.warn(\n          'Removing an @connection directive even though it does not have a key. ' +\n            'You may want to use the key parameter to specify a store key.',\n        );\n      }\n    }\n\n    return willRemove;\n  },\n};\nconst removed = new Map();\nexport function removeConnectionDirectiveFromDocument(doc: DocumentNode) {\n  checkDocument(doc);\n  const cached = removed.get(doc);\n  if (cached) return cached;\n  const docClone = removeDirectivesFromDocument([connectionRemoveConfig], doc);\n  removed.set(doc, docClone);\n  return docClone;\n}\n\nexport type GetDirectiveConfig = {\n  name?: string;\n  test?: (directive: DirectiveNode) => boolean;\n};\n\nfunction hasDirectivesInSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode,\n  nestedCheck = true,\n): boolean {\n  if (!(selectionSet && selectionSet.selections)) {\n    return false;\n  }\n  const matchedSelections = selectionSet.selections.filter(selection => {\n    return hasDirectivesInSelection(directives, selection, nestedCheck);\n  });\n  return matchedSelections.length > 0;\n}\n\nfunction hasDirectivesInSelection(\n  directives: GetDirectiveConfig[],\n  selection: SelectionNode,\n  nestedCheck = true,\n): boolean {\n  if (selection.kind !== 'Field' || !(selection as FieldNode)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n  const directiveMatcher = getDirectiveMatcher(directives);\n  const matchedDirectives = selection.directives.filter(directiveMatcher);\n  return (\n    matchedDirectives.length > 0 ||\n    (nestedCheck &&\n      hasDirectivesInSelectionSet(\n        directives,\n        selection.selectionSet,\n        nestedCheck,\n      ))\n  );\n}\n\nfunction getDirectivesFromSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode,\n) {\n  selectionSet.selections = selectionSet.selections\n    .filter(selection => {\n      return hasDirectivesInSelection(directives, selection, true);\n    })\n    .map(selection => {\n      if (hasDirectivesInSelection(directives, selection, false)) {\n        return selection;\n      }\n      if (\n        (selection.kind === 'Field' || selection.kind === 'InlineFragment') &&\n        selection.selectionSet\n      ) {\n        selection.selectionSet = getDirectivesFromSelectionSet(\n          directives,\n          selection.selectionSet,\n        );\n      }\n      return selection;\n    });\n  return selectionSet;\n}\n\nexport function getDirectivesFromDocument(\n  directives: GetDirectiveConfig[],\n  doc: DocumentNode,\n  includeAllFragments = false,\n): DocumentNode | null {\n  checkDocument(doc);\n  const docClone = cloneDeep(doc);\n  docClone.definitions = docClone.definitions.map(definition => {\n    if (\n      (definition.kind === 'OperationDefinition' ||\n        (definition.kind === 'FragmentDefinition' && !includeAllFragments)) &&\n      definition.selectionSet\n    ) {\n      definition.selectionSet = getDirectivesFromSelectionSet(\n        directives,\n        definition.selectionSet,\n      );\n    }\n    return definition;\n  });\n\n  const operation = getOperationDefinitionOrDie(docClone);\n  const fragments = createFragmentMap(getFragmentDefinitions(docClone));\n  return isNotEmpty(operation, fragments) ? docClone : null;\n}\n","export function getEnv(): string | undefined {\n  if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n    return process.env.NODE_ENV;\n  }\n\n  // default environment\n  return 'development';\n}\n\nexport function isEnv(env: string): boolean {\n  return getEnv() === env;\n}\n\nexport function isProduction(): boolean {\n  return isEnv('production') === true;\n}\n\nexport function isDevelopment(): boolean {\n  return isEnv('development') === true;\n}\n\nexport function isTest(): boolean {\n  return isEnv('test') === true;\n}\n","import { ExecutionResult } from 'graphql';\n\nexport function tryFunctionOrLogError(f: Function) {\n  try {\n    return f();\n  } catch (e) {\n    if (console.error) {\n      console.error(e);\n    }\n  }\n}\n\nexport function graphQLResultHasError(result: ExecutionResult) {\n  return result.errors && result.errors.length;\n}\n","/**\n * Performs a deep equality check on two JavaScript values.\n */\nexport function isEqual(a: any, b: any): boolean {\n  // If the two values are strictly equal, we are good.\n  if (a === b) {\n    return true;\n  }\n  // Dates are equivalent if their time values are equal.\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() === b.getTime();\n  }\n  // If a and b are both objects, we will compare their properties. This will compare arrays as\n  // well.\n  if (\n    a != null &&\n    typeof a === 'object' &&\n    b != null &&\n    typeof b === 'object'\n  ) {\n    // Compare all of the keys in `a`. If one of the keys has a different value, or that key does\n    // not exist in `b` return false immediately.\n    for (const key in a) {\n      if (Object.prototype.hasOwnProperty.call(a, key)) {\n        if (!Object.prototype.hasOwnProperty.call(b, key)) {\n          return false;\n        }\n        if (!isEqual(a[key], b[key])) {\n          return false;\n        }\n      }\n    }\n    // Look through all the keys in `b`. If `b` has a key that `a` does not, return false.\n    for (const key in b) {\n      if (!Object.prototype.hasOwnProperty.call(a, key)) {\n        return false;\n      }\n    }\n    // If we made it this far the objects are equal!\n    return true;\n  }\n  // Otherwise the values are not equal.\n  return false;\n}\n","import { isDevelopment, isTest } from './environment';\n\n// taken straight from https://github.com/substack/deep-freeze to avoid import hassles with rollup\nfunction deepFreeze(o: any) {\n  Object.freeze(o);\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      o.hasOwnProperty(prop) &&\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n\nexport function maybeDeepFreeze(obj: any) {\n  if (isDevelopment() || isTest()) {\n    // Polyfilled Symbols potentially cause infinite / very deep recursion while deep freezing\n    // which is known to crash IE11 (https://github.com/apollographql/apollo-client/issues/3043).\n    const symbolIsPolyfilled =\n      typeof Symbol === 'function' && typeof Symbol('') === 'string';\n\n    if (!symbolIsPolyfilled) {\n      return deepFreeze(obj);\n    }\n  }\n  return obj;\n}\n","import { isProduction, isTest } from './environment';\n\nconst haveWarned = Object.create({});\n\n/**\n * Print a warning only once in development.\n * In production no warnings are printed.\n * In test all warnings are printed.\n *\n * @param msg The warning message\n * @param type warn or error (will call console.warn or console.error)\n */\nexport function warnOnceInDevelopment(msg: string, type = 'warn') {\n  if (isProduction()) {\n    return;\n  }\n  if (!haveWarned[msg]) {\n    if (!isTest()) {\n      haveWarned[msg] = true;\n    }\n    switch (type) {\n      case 'error':\n        console.error(msg);\n        break;\n      default:\n        console.warn(msg);\n    }\n  }\n}\n"],"names":["added"],"mappings":"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"}