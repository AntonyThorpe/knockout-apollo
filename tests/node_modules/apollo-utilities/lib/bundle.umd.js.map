{"version":3,"file":"bundle.umd.js","sources":["../src/storeUtils.ts","../src/directives.ts","../src/fragments.ts","../src/util/assign.ts","../src/getFromAST.ts","../src/util/cloneDeep.ts","../src/transform.ts","../src/util/environment.ts","../src/util/errorHandling.ts","../src/util/isEqual.ts","../src/util/maybeDeepFreeze.ts","../src/util/warnOnce.ts"],"sourcesContent":["import {\n  DirectiveNode,\n  FieldNode,\n  IntValueNode,\n  FloatValueNode,\n  StringValueNode,\n  BooleanValueNode,\n  ObjectValueNode,\n  ListValueNode,\n  EnumValueNode,\n  NullValueNode,\n  VariableNode,\n  InlineFragmentNode,\n  ValueNode,\n  SelectionNode,\n  NameNode,\n} from 'graphql';\n\nexport interface IdValue {\n  type: 'id';\n  id: string;\n  generated: boolean;\n  typename: string | undefined;\n}\n\nexport interface JsonValue {\n  type: 'json';\n  json: any;\n}\n\nexport type ListValue = Array<null | IdValue>;\n\nexport type StoreValue =\n  | number\n  | string\n  | string[]\n  | IdValue\n  | ListValue\n  | JsonValue\n  | null\n  | undefined\n  | void\n  | Object;\n\nexport type ScalarValue = StringValueNode | BooleanValueNode | EnumValueNode;\n\nexport function isScalarValue(value: ValueNode): value is ScalarValue {\n  return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\n\nexport type NumberValue = IntValueNode | FloatValueNode;\n\nexport function isNumberValue(value: ValueNode): value is NumberValue {\n  return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\n\nfunction isStringValue(value: ValueNode): value is StringValueNode {\n  return value.kind === 'StringValue';\n}\n\nfunction isBooleanValue(value: ValueNode): value is BooleanValueNode {\n  return value.kind === 'BooleanValue';\n}\n\nfunction isIntValue(value: ValueNode): value is IntValueNode {\n  return value.kind === 'IntValue';\n}\n\nfunction isFloatValue(value: ValueNode): value is FloatValueNode {\n  return value.kind === 'FloatValue';\n}\n\nfunction isVariable(value: ValueNode): value is VariableNode {\n  return value.kind === 'Variable';\n}\n\nfunction isObjectValue(value: ValueNode): value is ObjectValueNode {\n  return value.kind === 'ObjectValue';\n}\n\nfunction isListValue(value: ValueNode): value is ListValueNode {\n  return value.kind === 'ListValue';\n}\n\nfunction isEnumValue(value: ValueNode): value is EnumValueNode {\n  return value.kind === 'EnumValue';\n}\n\nfunction isNullValue(value: ValueNode): value is NullValueNode {\n  return value.kind === 'NullValue';\n}\n\nexport function valueToObjectRepresentation(\n  argObj: any,\n  name: NameNode,\n  value: ValueNode,\n  variables?: Object,\n) {\n  if (isIntValue(value) || isFloatValue(value)) {\n    argObj[name.value] = Number(value.value);\n  } else if (isBooleanValue(value) || isStringValue(value)) {\n    argObj[name.value] = value.value;\n  } else if (isObjectValue(value)) {\n    const nestedArgObj = {};\n    value.fields.map(obj =>\n      valueToObjectRepresentation(nestedArgObj, obj.name, obj.value, variables),\n    );\n    argObj[name.value] = nestedArgObj;\n  } else if (isVariable(value)) {\n    const variableValue = (variables || ({} as any))[value.name.value];\n    argObj[name.value] = variableValue;\n  } else if (isListValue(value)) {\n    argObj[name.value] = value.values.map(listValue => {\n      const nestedArgArrayObj = {};\n      valueToObjectRepresentation(\n        nestedArgArrayObj,\n        name,\n        listValue,\n        variables,\n      );\n      return (nestedArgArrayObj as any)[name.value];\n    });\n  } else if (isEnumValue(value)) {\n    argObj[name.value] = (value as EnumValueNode).value;\n  } else if (isNullValue(value)) {\n    argObj[name.value] = null;\n  } else {\n    throw new Error(`The inline argument \"${name.value}\" of kind \"${\n      (value as any).kind\n    }\" is not supported.\n                    Use variables instead of inline arguments to overcome this limitation.`);\n  }\n}\n\nexport function storeKeyNameFromField(\n  field: FieldNode,\n  variables?: Object,\n): string {\n  let directivesObj: any = null;\n  if (field.directives) {\n    directivesObj = {};\n    field.directives.forEach(directive => {\n      directivesObj[directive.name.value] = {};\n\n      if (directive.arguments) {\n        directive.arguments.forEach(({ name, value }) =>\n          valueToObjectRepresentation(\n            directivesObj[directive.name.value],\n            name,\n            value,\n            variables,\n          ),\n        );\n      }\n    });\n  }\n\n  let argObj: any = null;\n  if (field.arguments && field.arguments.length) {\n    argObj = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n  }\n\n  return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\n\nexport type Directives = {\n  [directiveName: string]: {\n    [argName: string]: any;\n  };\n};\n\nconst KNOWN_DIRECTIVES: string[] = [\n  'connection',\n  'include',\n  'skip',\n  'client',\n  'rest',\n  'export',\n];\n\nexport function getStoreKeyName(\n  fieldName: string,\n  args?: Object,\n  directives?: Directives,\n): string {\n  if (\n    directives &&\n    directives['connection'] &&\n    directives['connection']['key']\n  ) {\n    if (\n      directives['connection']['filter'] &&\n      (directives['connection']['filter'] as string[]).length > 0\n    ) {\n      const filterKeys = directives['connection']['filter']\n        ? (directives['connection']['filter'] as string[])\n        : [];\n      filterKeys.sort();\n\n      const queryArgs = args as { [key: string]: any };\n      const filteredArgs = {} as { [key: string]: any };\n      filterKeys.forEach(key => {\n        filteredArgs[key] = queryArgs[key];\n      });\n\n      return `${directives['connection']['key']}(${JSON.stringify(\n        filteredArgs,\n      )})`;\n    } else {\n      return directives['connection']['key'];\n    }\n  }\n\n  let completeFieldName: string = fieldName;\n\n  if (args) {\n    const stringifiedArgs: string = JSON.stringify(args);\n    completeFieldName += `(${stringifiedArgs})`;\n  }\n\n  if (directives) {\n    Object.keys(directives).forEach(key => {\n      if (KNOWN_DIRECTIVES.indexOf(key) !== -1) return;\n      if (directives[key] && Object.keys(directives[key]).length) {\n        completeFieldName += `@${key}(${JSON.stringify(directives[key])})`;\n      } else {\n        completeFieldName += `@${key}`;\n      }\n    });\n  }\n\n  return completeFieldName;\n}\n\nexport function argumentsObjectFromField(\n  field: FieldNode | DirectiveNode,\n  variables: Object,\n): Object {\n  if (field.arguments && field.arguments.length) {\n    const argObj: Object = {};\n    field.arguments.forEach(({ name, value }) =>\n      valueToObjectRepresentation(argObj, name, value, variables),\n    );\n    return argObj;\n  }\n\n  return null;\n}\n\nexport function resultKeyNameFromField(field: FieldNode): string {\n  return field.alias ? field.alias.value : field.name.value;\n}\n\nexport function isField(selection: SelectionNode): selection is FieldNode {\n  return selection.kind === 'Field';\n}\n\nexport function isInlineFragment(\n  selection: SelectionNode,\n): selection is InlineFragmentNode {\n  return selection.kind === 'InlineFragment';\n}\n\nexport function isIdValue(idObject: StoreValue): idObject is IdValue {\n  return idObject && (idObject as IdValue | JsonValue).type === 'id';\n}\n\nexport type IdConfig = {\n  id: string;\n  typename: string | undefined;\n};\n\nexport function toIdValue(\n  idConfig: string | IdConfig,\n  generated = false,\n): IdValue {\n  return {\n    type: 'id',\n    generated,\n    ...(typeof idConfig === 'string'\n      ? { id: idConfig, typename: undefined }\n      : idConfig),\n  };\n}\n\nexport function isJsonValue(jsonObject: StoreValue): jsonObject is JsonValue {\n  return (\n    jsonObject != null &&\n    typeof jsonObject === 'object' &&\n    (jsonObject as IdValue | JsonValue).type === 'json'\n  );\n}\n\nfunction defaultValueFromVariable(node: VariableNode) {\n  throw new Error(`Variable nodes are not supported by valueFromNode`);\n}\n\nexport type VariableValue = (node: VariableNode) => any;\n\n/**\n * Evaluate a ValueNode and yield its value in its natural JS form.\n */\nexport function valueFromNode(\n  node: ValueNode,\n  onVariable: VariableValue = defaultValueFromVariable,\n): any {\n  switch (node.kind) {\n    case 'Variable':\n      return onVariable(node);\n    case 'NullValue':\n      return null;\n    case 'IntValue':\n      return parseInt(node.value);\n    case 'FloatValue':\n      return parseFloat(node.value);\n    case 'ListValue':\n      return node.values.map(v => valueFromNode(v, onVariable));\n    case 'ObjectValue': {\n      const value: { [key: string]: any } = {};\n      for (const field of node.fields) {\n        value[field.name.value] = valueFromNode(field.value, onVariable);\n      }\n      return value;\n    }\n    default:\n      return node.value;\n  }\n}\n","// Provides the methods that allow QueryManager to handle\r\n// the `skip` and `include` directives within GraphQL.\r\nimport {\r\n  FieldNode,\r\n  OperationDefinitionNode,\r\n  SelectionNode,\r\n  VariableNode,\r\n  BooleanValueNode,\r\n  DirectiveNode,\r\n  DocumentNode,\r\n} from 'graphql';\r\n\r\nimport { argumentsObjectFromField } from './storeUtils';\r\n\r\nexport type DirectiveInfo = {\r\n  [fieldName: string]: { [argName: string]: any };\r\n};\r\n\r\nexport function getDirectiveInfoFromField(\r\n  field: FieldNode,\r\n  variables: Object,\r\n): DirectiveInfo {\r\n  if (field.directives && field.directives.length) {\r\n    const directiveObj: DirectiveInfo = {};\r\n    field.directives.forEach((directive: DirectiveNode) => {\r\n      directiveObj[directive.name.value] = argumentsObjectFromField(\r\n        directive,\r\n        variables,\r\n      );\r\n    });\r\n    return directiveObj;\r\n  }\r\n  return null;\r\n}\r\n\r\nexport function shouldInclude(\r\n  selection: SelectionNode,\r\n  variables: { [name: string]: any } = {},\r\n): boolean {\r\n  if (!selection.directives) {\r\n    return true;\r\n  }\r\n\r\n  let res: boolean = true;\r\n  selection.directives.forEach(directive => {\r\n    // TODO should move this validation to GraphQL validation once that's implemented.\r\n    if (directive.name.value !== 'skip' && directive.name.value !== 'include') {\r\n      // Just don't worry about directives we don't understand\r\n      return;\r\n    }\r\n\r\n    //evaluate the \"if\" argument and skip (i.e. return undefined) if it evaluates to true.\r\n    const directiveArguments = directive.arguments || [];\r\n    const directiveName = directive.name.value;\r\n    if (directiveArguments.length !== 1) {\r\n      throw new Error(\r\n        `Incorrect number of arguments for the @${directiveName} directive.`,\r\n      );\r\n    }\r\n\r\n    const ifArgument = directiveArguments[0];\r\n    if (!ifArgument.name || ifArgument.name.value !== 'if') {\r\n      throw new Error(`Invalid argument for the @${directiveName} directive.`);\r\n    }\r\n\r\n    const ifValue = directiveArguments[0].value;\r\n    let evaledValue: boolean = false;\r\n    if (!ifValue || ifValue.kind !== 'BooleanValue') {\r\n      // means it has to be a variable value if this is a valid @skip or @include directive\r\n      if (ifValue.kind !== 'Variable') {\r\n        throw new Error(\r\n          `Argument for the @${directiveName} directive must be a variable or a boolean value.`,\r\n        );\r\n      } else {\r\n        evaledValue = variables[(ifValue as VariableNode).name.value];\r\n        if (evaledValue === undefined) {\r\n          throw new Error(\r\n            `Invalid variable referenced in @${directiveName} directive.`,\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      evaledValue = (ifValue as BooleanValueNode).value;\r\n    }\r\n\r\n    if (directiveName === 'skip') {\r\n      evaledValue = !evaledValue;\r\n    }\r\n\r\n    if (!evaledValue) {\r\n      res = false;\r\n    }\r\n  });\r\n\r\n  return res;\r\n}\r\n\r\nexport function flattenSelections(selection: SelectionNode): SelectionNode[] {\r\n  if (\r\n    !(selection as FieldNode).selectionSet ||\r\n    !((selection as FieldNode).selectionSet.selections.length > 0)\r\n  )\r\n    return [selection];\r\n\r\n  return [selection].concat(\r\n    (selection as FieldNode).selectionSet.selections\r\n      .map(selectionNode =>\r\n        [selectionNode].concat(flattenSelections(selectionNode)),\r\n      )\r\n      .reduce((selections, selected) => selections.concat(selected), []),\r\n  );\r\n}\r\n\r\nconst added = new Map();\r\nexport function getDirectiveNames(doc: DocumentNode) {\r\n  const cached = added.get(doc);\r\n  if (cached) return cached;\r\n\r\n  // operation => [names of directives];\r\n  const directives = doc.definitions\r\n    .filter(\r\n      (definition: OperationDefinitionNode) =>\r\n        definition.selectionSet && definition.selectionSet.selections,\r\n    )\r\n    // operation => [[Selection]]\r\n    .map(x => flattenSelections(x as any))\r\n    // [[Selection]] => [Selection]\r\n    .reduce((selections, selected) => selections.concat(selected), [])\r\n    // [Selection] => [Selection with Directives]\r\n    .filter(\r\n      (selection: SelectionNode) =>\r\n        selection.directives && selection.directives.length > 0,\r\n    )\r\n    // [Selection with Directives] => [[Directives]]\r\n    .map((selection: SelectionNode) => selection.directives)\r\n    // [[Directives]] => [Directives]\r\n    .reduce((directives, directive) => directives.concat(directive), [])\r\n    // [Directives] => [Name]\r\n    .map((directive: DirectiveNode) => directive.name.value);\r\n\r\n  added.set(doc, directives);\r\n  return directives;\r\n}\r\n\r\nexport function hasDirectives(names: string[], doc: DocumentNode) {\r\n  return getDirectiveNames(doc).some(\r\n    (name: string) => names.indexOf(name) > -1,\r\n  );\r\n}\r\n","import { DocumentNode, FragmentDefinitionNode } from 'graphql';\r\n\r\n/**\r\n * Returns a query document which adds a single query operation that only\r\n * spreads the target fragment inside of it.\r\n *\r\n * So for example a document of:\r\n *\r\n * ```graphql\r\n * fragment foo on Foo { a b c }\r\n * ```\r\n *\r\n * Turns into:\r\n *\r\n * ```graphql\r\n * { ...foo }\r\n *\r\n * fragment foo on Foo { a b c }\r\n * ```\r\n *\r\n * The target fragment will either be the only fragment in the document, or a\r\n * fragment specified by the provided `fragmentName`. If there is more then one\r\n * fragment, but a `fragmentName` was not defined then an error will be thrown.\r\n */\r\nexport function getFragmentQueryDocument(\r\n  document: DocumentNode,\r\n  fragmentName?: string,\r\n): DocumentNode {\r\n  let actualFragmentName = fragmentName;\r\n\r\n  // Build an array of all our fragment definitions that will be used for\r\n  // validations. We also do some validations on the other definitions in the\r\n  // document while building this list.\r\n  const fragments: Array<FragmentDefinitionNode> = [];\r\n  document.definitions.forEach(definition => {\r\n    // Throw an error if we encounter an operation definition because we will\r\n    // define our own operation definition later on.\r\n    if (definition.kind === 'OperationDefinition') {\r\n      throw new Error(\r\n        `Found a ${definition.operation} operation${\r\n          definition.name ? ` named '${definition.name.value}'` : ''\r\n        }. ` +\r\n          'No operations are allowed when using a fragment as a query. Only fragments are allowed.',\r\n      );\r\n    }\r\n    // Add our definition to the fragments array if it is a fragment\r\n    // definition.\r\n    if (definition.kind === 'FragmentDefinition') {\r\n      fragments.push(definition);\r\n    }\r\n  });\r\n\r\n  // If the user did not give us a fragment name then let us try to get a\r\n  // name from a single fragment in the definition.\r\n  if (typeof actualFragmentName === 'undefined') {\r\n    if (fragments.length !== 1) {\r\n      throw new Error(\r\n        `Found ${\r\n          fragments.length\r\n        } fragments. \\`fragmentName\\` must be provided when there is not exactly 1 fragment.`,\r\n      );\r\n    }\r\n    actualFragmentName = fragments[0].name.value;\r\n  }\r\n\r\n  // Generate a query document with an operation that simply spreads the\r\n  // fragment inside of it.\r\n  const query: DocumentNode = {\r\n    ...document,\r\n    definitions: [\r\n      {\r\n        kind: 'OperationDefinition',\r\n        operation: 'query',\r\n        selectionSet: {\r\n          kind: 'SelectionSet',\r\n          selections: [\r\n            {\r\n              kind: 'FragmentSpread',\r\n              name: {\r\n                kind: 'Name',\r\n                value: actualFragmentName,\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n      ...document.definitions,\r\n    ],\r\n  };\r\n\r\n  return query;\r\n}\r\n","/**\r\n * Adds the properties of one or more source objects to a target object. Works exactly like\r\n * `Object.assign`, but as a utility to maintain support for IE 11.\r\n *\r\n * @see https://github.com/apollostack/apollo-client/pull/1009\r\n */\r\nexport function assign<A, B>(a: A, b: B): A & B;\r\nexport function assign<A, B, C>(a: A, b: B, c: C): A & B & C;\r\nexport function assign<A, B, C, D>(a: A, b: B, c: C, d: D): A & B & C & D;\r\nexport function assign<A, B, C, D, E>(\r\n  a: A,\r\n  b: B,\r\n  c: C,\r\n  d: D,\r\n  e: E,\r\n): A & B & C & D & E;\r\nexport function assign(target: any, ...sources: Array<any>): any;\r\nexport function assign(\r\n  target: { [key: string]: any },\r\n  ...sources: Array<{ [key: string]: any }>\r\n): { [key: string]: any } {\r\n  sources.forEach(source => {\r\n    if (typeof source === 'undefined' || source === null) {\r\n      return;\r\n    }\r\n    Object.keys(source).forEach(key => {\r\n      target[key] = source[key];\r\n    });\r\n  });\r\n  return target;\r\n}\r\n","import {\n  DocumentNode,\n  OperationDefinitionNode,\n  FragmentDefinitionNode,\n  ValueNode,\n} from 'graphql';\nimport { assign } from './util/assign';\n\nimport { valueToObjectRepresentation, JsonValue } from './storeUtils';\n\nexport function getMutationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode {\n  checkDocument(doc);\n\n  let mutationDef: OperationDefinitionNode | null = doc.definitions.filter(\n    definition =>\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'mutation',\n  )[0] as OperationDefinitionNode;\n\n  if (!mutationDef) {\n    throw new Error('Must contain a mutation definition.');\n  }\n\n  return mutationDef;\n}\n\n// Checks the document for errors and throws an exception if there is an error.\nexport function checkDocument(doc: DocumentNode) {\n  if (doc.kind !== 'Document') {\n    throw new Error(`Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`);\n  }\n\n  const operations = doc.definitions\n    .filter(d => d.kind !== 'FragmentDefinition')\n    .map(definition => {\n      if (definition.kind !== 'OperationDefinition') {\n        throw new Error(\n          `Schema type definitions not allowed in queries. Found: \"${\n            definition.kind\n          }\"`,\n        );\n      }\n      return definition;\n    });\n\n  if (operations.length > 1) {\n    throw new Error(\n      `Ambiguous GraphQL document: contains ${operations.length} operations`,\n    );\n  }\n}\n\nexport function getOperationDefinition(\n  doc: DocumentNode,\n): OperationDefinitionNode | undefined {\n  checkDocument(doc);\n  return doc.definitions.filter(\n    definition => definition.kind === 'OperationDefinition',\n  )[0] as OperationDefinitionNode;\n}\n\nexport function getOperationDefinitionOrDie(\n  document: DocumentNode,\n): OperationDefinitionNode {\n  const def = getOperationDefinition(document);\n  if (!def) {\n    throw new Error(`GraphQL document is missing an operation`);\n  }\n  return def;\n}\n\nexport function getOperationName(doc: DocumentNode): string | null {\n  return (\n    doc.definitions\n      .filter(\n        definition =>\n          definition.kind === 'OperationDefinition' && definition.name,\n      )\n      .map((x: OperationDefinitionNode) => x.name.value)[0] || null\n  );\n}\n\n// Returns the FragmentDefinitions from a particular document as an array\nexport function getFragmentDefinitions(\n  doc: DocumentNode,\n): FragmentDefinitionNode[] {\n  return doc.definitions.filter(\n    definition => definition.kind === 'FragmentDefinition',\n  ) as FragmentDefinitionNode[];\n}\n\nexport function getQueryDefinition(doc: DocumentNode): OperationDefinitionNode {\n  const queryDef = getOperationDefinition(doc) as OperationDefinitionNode;\n\n  if (!queryDef || queryDef.operation !== 'query') {\n    throw new Error('Must contain a query definition.');\n  }\n\n  return queryDef;\n}\n\nexport function getFragmentDefinition(\n  doc: DocumentNode,\n): FragmentDefinitionNode {\n  if (doc.kind !== 'Document') {\n    throw new Error(`Expecting a parsed GraphQL document. Perhaps you need to wrap the query \\\nstring in a \"gql\" tag? http://docs.apollostack.com/apollo-client/core.html#gql`);\n  }\n\n  if (doc.definitions.length > 1) {\n    throw new Error('Fragment must have exactly one definition.');\n  }\n\n  const fragmentDef = doc.definitions[0] as FragmentDefinitionNode;\n\n  if (fragmentDef.kind !== 'FragmentDefinition') {\n    throw new Error('Must be a fragment definition.');\n  }\n\n  return fragmentDef as FragmentDefinitionNode;\n}\n\n/**\n * Returns the first operation definition found in this document.\n * If no operation definition is found, the first fragment definition will be returned.\n * If no definitions are found, an error will be thrown.\n */\nexport function getMainDefinition(\n  queryDoc: DocumentNode,\n): OperationDefinitionNode | FragmentDefinitionNode {\n  checkDocument(queryDoc);\n\n  let fragmentDefinition;\n\n  for (let definition of queryDoc.definitions) {\n    if (definition.kind === 'OperationDefinition') {\n      const operation = (definition as OperationDefinitionNode).operation;\n      if (\n        operation === 'query' ||\n        operation === 'mutation' ||\n        operation === 'subscription'\n      ) {\n        return definition as OperationDefinitionNode;\n      }\n    }\n    if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n      // we do this because we want to allow multiple fragment definitions\n      // to precede an operation definition.\n      fragmentDefinition = definition as FragmentDefinitionNode;\n    }\n  }\n\n  if (fragmentDefinition) {\n    return fragmentDefinition;\n  }\n\n  throw new Error(\n    'Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.',\n  );\n}\n\n/**\n * This is an interface that describes a map from fragment names to fragment definitions.\n */\nexport interface FragmentMap {\n  [fragmentName: string]: FragmentDefinitionNode;\n}\n\n// Utility function that takes a list of fragment definitions and makes a hash out of them\n// that maps the name of the fragment to the fragment definition.\nexport function createFragmentMap(\n  fragments: FragmentDefinitionNode[] = [],\n): FragmentMap {\n  const symTable: FragmentMap = {};\n  fragments.forEach(fragment => {\n    symTable[fragment.name.value] = fragment;\n  });\n\n  return symTable;\n}\n\nexport function getDefaultValues(\n  definition: OperationDefinitionNode | undefined,\n): { [key: string]: JsonValue } {\n  if (\n    definition &&\n    definition.variableDefinitions &&\n    definition.variableDefinitions.length\n  ) {\n    const defaultValues = definition.variableDefinitions\n      .filter(({ defaultValue }) => defaultValue)\n      .map(({ variable, defaultValue }): { [key: string]: JsonValue } => {\n        const defaultValueObj: { [key: string]: JsonValue } = {};\n        valueToObjectRepresentation(\n          defaultValueObj,\n          variable.name,\n          defaultValue as ValueNode,\n        );\n\n        return defaultValueObj;\n      });\n\n    return assign({}, ...defaultValues);\n  }\n\n  return {};\n}\n\n/**\n * Returns the names of all variables declared by the operation.\n */\nexport function variablesInOperation(\n  operation: OperationDefinitionNode,\n): Set<string> {\n  const names = new Set<string>();\n  if (operation.variableDefinitions) {\n    for (const definition of operation.variableDefinitions) {\n      names.add(definition.variable.name.value);\n    }\n  }\n\n  return names;\n}\n","/**\r\n * Deeply clones a value to create a new instance.\r\n */\r\nexport function cloneDeep<T>(value: T): T {\r\n  // If the value is an array, create a new array where every item has been cloned.\r\n  if (Array.isArray(value)) {\r\n    return value.map(item => cloneDeep(item)) as any;\r\n  }\r\n  // If the value is an object, go through all of the object’s properties and add them to a new\r\n  // object.\r\n  if (value !== null && typeof value === 'object') {\r\n    const nextValue: any = {};\r\n    for (const key in value) {\r\n      if (value.hasOwnProperty(key)) {\r\n        nextValue[key] = cloneDeep(value[key]);\r\n      }\r\n    }\r\n    return nextValue;\r\n  }\r\n  // Otherwise this is some primitive value and it is therefore immutable so we can just return it\r\n  // directly.\r\n  return value;\r\n}\r\n","import {\n  DocumentNode,\n  SelectionNode,\n  SelectionSetNode,\n  DefinitionNode,\n  OperationDefinitionNode,\n  FieldNode,\n  DirectiveNode,\n  FragmentDefinitionNode,\n} from 'graphql';\n\nimport { cloneDeep } from './util/cloneDeep';\n\nimport {\n  checkDocument,\n  getOperationDefinitionOrDie,\n  getFragmentDefinitions,\n  createFragmentMap,\n  FragmentMap,\n} from './getFromAST';\n\nconst TYPENAME_FIELD: FieldNode = {\n  kind: 'Field',\n  name: {\n    kind: 'Name',\n    value: '__typename',\n  },\n};\n\nfunction isNotEmpty(\n  op: OperationDefinitionNode | FragmentDefinitionNode,\n  fragments: FragmentMap,\n): Boolean {\n  // keep selections that are still valid\n  return (\n    op.selectionSet.selections.filter(\n      selectionSet =>\n        // anything that doesn't match the compound filter is okay\n        !// not an empty array\n        (\n          selectionSet &&\n          // look into fragments to verify they should stay\n          selectionSet.kind === 'FragmentSpread' &&\n          // see if the fragment in the map is valid (recursively)\n          !isNotEmpty(fragments[selectionSet.name.value], fragments)\n        ),\n    ).length > 0\n  );\n}\n\nfunction getDirectiveMatcher(\n  directives: (RemoveDirectiveConfig | GetDirectiveConfig)[],\n) {\n  return function directiveMatcher(directive: DirectiveNode): Boolean {\n    return directives.some(\n      (dir: RemoveDirectiveConfig | GetDirectiveConfig) => {\n        if (dir.name && dir.name === directive.name.value) return true;\n        if (dir.test && dir.test(directive)) return true;\n        return false;\n      },\n    );\n  };\n}\n\nfunction addTypenameToSelectionSet(\n  selectionSet: SelectionSetNode,\n  isRoot = false,\n) {\n  if (selectionSet.selections) {\n    if (!isRoot) {\n      const alreadyHasThisField = selectionSet.selections.some(selection => {\n        return (\n          selection.kind === 'Field' &&\n          (selection as FieldNode).name.value === '__typename'\n        );\n      });\n\n      if (!alreadyHasThisField) {\n        selectionSet.selections.push(TYPENAME_FIELD);\n      }\n    }\n\n    selectionSet.selections.forEach(selection => {\n      // Must not add __typename if we're inside an introspection query\n      if (selection.kind === 'Field') {\n        if (\n          selection.name.value.lastIndexOf('__', 0) !== 0 &&\n          selection.selectionSet\n        ) {\n          addTypenameToSelectionSet(selection.selectionSet);\n        }\n      } else if (selection.kind === 'InlineFragment') {\n        if (selection.selectionSet) {\n          addTypenameToSelectionSet(selection.selectionSet);\n        }\n      }\n    });\n  }\n}\n\nexport type RemoveDirectiveConfig = {\n  name?: string;\n  test?: (directive: DirectiveNode) => boolean;\n  remove?: boolean;\n};\n\nfunction removeDirectivesFromSelectionSet(\n  directives: RemoveDirectiveConfig[],\n  selectionSet: SelectionSetNode,\n): SelectionSetNode {\n  if (!selectionSet.selections) return selectionSet;\n  // if any of the directives are set to remove this selectionSet, remove it\n  const agressiveRemove = directives.some(\n    (dir: RemoveDirectiveConfig) => dir.remove,\n  );\n\n  selectionSet.selections = selectionSet.selections\n    .map(selection => {\n      if (\n        selection.kind !== 'Field' ||\n        !(selection as FieldNode) ||\n        !selection.directives\n      )\n        return selection;\n      const directiveMatcher = getDirectiveMatcher(directives);\n      let remove: boolean;\n      selection.directives = selection.directives.filter(directive => {\n        const shouldKeep = !directiveMatcher(directive);\n\n        if (!remove && !shouldKeep && agressiveRemove) remove = true;\n\n        return shouldKeep;\n      });\n\n      return remove ? null : selection;\n    })\n    .filter(x => !!x);\n\n  selectionSet.selections.forEach(selection => {\n    if (\n      (selection.kind === 'Field' || selection.kind === 'InlineFragment') &&\n      selection.selectionSet\n    ) {\n      removeDirectivesFromSelectionSet(directives, selection.selectionSet);\n    }\n  });\n\n  return selectionSet;\n}\n\nexport function removeDirectivesFromDocument(\n  directives: RemoveDirectiveConfig[],\n  doc: DocumentNode,\n): DocumentNode | null {\n  const docClone = cloneDeep(doc);\n\n  docClone.definitions.forEach((definition: DefinitionNode) => {\n    removeDirectivesFromSelectionSet(\n      directives,\n      (definition as OperationDefinitionNode).selectionSet,\n    );\n  });\n  const operation = getOperationDefinitionOrDie(docClone);\n  const fragments = createFragmentMap(getFragmentDefinitions(docClone));\n  return isNotEmpty(operation, fragments) ? docClone : null;\n}\n\nconst added = new Map();\nexport function addTypenameToDocument(doc: DocumentNode) {\n  checkDocument(doc);\n  const cached = added.get(doc);\n  if (cached) return cached;\n\n  const docClone = cloneDeep(doc);\n\n  docClone.definitions.forEach((definition: DefinitionNode) => {\n    const isRoot = definition.kind === 'OperationDefinition';\n    addTypenameToSelectionSet(\n      (definition as OperationDefinitionNode).selectionSet,\n      isRoot,\n    );\n  });\n\n  added.set(doc, docClone);\n  return docClone;\n}\n\nconst connectionRemoveConfig = {\n  test: (directive: DirectiveNode) => {\n    const willRemove = directive.name.value === 'connection';\n    if (willRemove) {\n      if (\n        !directive.arguments ||\n        !directive.arguments.some(arg => arg.name.value === 'key')\n      ) {\n        console.warn(\n          'Removing an @connection directive even though it does not have a key. ' +\n            'You may want to use the key parameter to specify a store key.',\n        );\n      }\n    }\n\n    return willRemove;\n  },\n};\nconst removed = new Map();\nexport function removeConnectionDirectiveFromDocument(doc: DocumentNode) {\n  checkDocument(doc);\n  const cached = removed.get(doc);\n  if (cached) return cached;\n  const docClone = removeDirectivesFromDocument([connectionRemoveConfig], doc);\n  removed.set(doc, docClone);\n  return docClone;\n}\n\nexport type GetDirectiveConfig = {\n  name?: string;\n  test?: (directive: DirectiveNode) => boolean;\n};\n\nfunction hasDirectivesInSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode,\n  nestedCheck = true,\n): boolean {\n  if (!(selectionSet && selectionSet.selections)) {\n    return false;\n  }\n  const matchedSelections = selectionSet.selections.filter(selection => {\n    return hasDirectivesInSelection(directives, selection, nestedCheck);\n  });\n  return matchedSelections.length > 0;\n}\n\nfunction hasDirectivesInSelection(\n  directives: GetDirectiveConfig[],\n  selection: SelectionNode,\n  nestedCheck = true,\n): boolean {\n  if (selection.kind !== 'Field' || !(selection as FieldNode)) {\n    return true;\n  }\n\n  if (!selection.directives) {\n    return false;\n  }\n  const directiveMatcher = getDirectiveMatcher(directives);\n  const matchedDirectives = selection.directives.filter(directiveMatcher);\n  return (\n    matchedDirectives.length > 0 ||\n    (nestedCheck &&\n      hasDirectivesInSelectionSet(\n        directives,\n        selection.selectionSet,\n        nestedCheck,\n      ))\n  );\n}\n\nfunction getDirectivesFromSelectionSet(\n  directives: GetDirectiveConfig[],\n  selectionSet: SelectionSetNode,\n) {\n  selectionSet.selections = selectionSet.selections\n    .filter(selection => {\n      return hasDirectivesInSelection(directives, selection, true);\n    })\n    .map(selection => {\n      if (hasDirectivesInSelection(directives, selection, false)) {\n        return selection;\n      }\n      if (\n        (selection.kind === 'Field' || selection.kind === 'InlineFragment') &&\n        selection.selectionSet\n      ) {\n        selection.selectionSet = getDirectivesFromSelectionSet(\n          directives,\n          selection.selectionSet,\n        );\n      }\n      return selection;\n    });\n  return selectionSet;\n}\n\nexport function getDirectivesFromDocument(\n  directives: GetDirectiveConfig[],\n  doc: DocumentNode,\n  includeAllFragments = false,\n): DocumentNode | null {\n  checkDocument(doc);\n  const docClone = cloneDeep(doc);\n  docClone.definitions = docClone.definitions.map(definition => {\n    if (\n      (definition.kind === 'OperationDefinition' ||\n        (definition.kind === 'FragmentDefinition' && !includeAllFragments)) &&\n      definition.selectionSet\n    ) {\n      definition.selectionSet = getDirectivesFromSelectionSet(\n        directives,\n        definition.selectionSet,\n      );\n    }\n    return definition;\n  });\n\n  const operation = getOperationDefinitionOrDie(docClone);\n  const fragments = createFragmentMap(getFragmentDefinitions(docClone));\n  return isNotEmpty(operation, fragments) ? docClone : null;\n}\n","export function getEnv(): string | undefined {\n  if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n    return process.env.NODE_ENV;\n  }\n\n  // default environment\n  return 'development';\n}\n\nexport function isEnv(env: string): boolean {\n  return getEnv() === env;\n}\n\nexport function isProduction(): boolean {\n  return isEnv('production') === true;\n}\n\nexport function isDevelopment(): boolean {\n  return isEnv('development') === true;\n}\n\nexport function isTest(): boolean {\n  return isEnv('test') === true;\n}\n","import { ExecutionResult } from 'graphql';\n\nexport function tryFunctionOrLogError(f: Function) {\n  try {\n    return f();\n  } catch (e) {\n    if (console.error) {\n      console.error(e);\n    }\n  }\n}\n\nexport function graphQLResultHasError(result: ExecutionResult) {\n  return result.errors && result.errors.length;\n}\n","/**\n * Performs a deep equality check on two JavaScript values.\n */\nexport function isEqual(a: any, b: any): boolean {\n  // If the two values are strictly equal, we are good.\n  if (a === b) {\n    return true;\n  }\n  // Dates are equivalent if their time values are equal.\n  if (a instanceof Date && b instanceof Date) {\n    return a.getTime() === b.getTime();\n  }\n  // If a and b are both objects, we will compare their properties. This will compare arrays as\n  // well.\n  if (\n    a != null &&\n    typeof a === 'object' &&\n    b != null &&\n    typeof b === 'object'\n  ) {\n    // Compare all of the keys in `a`. If one of the keys has a different value, or that key does\n    // not exist in `b` return false immediately.\n    for (const key in a) {\n      if (Object.prototype.hasOwnProperty.call(a, key)) {\n        if (!Object.prototype.hasOwnProperty.call(b, key)) {\n          return false;\n        }\n        if (!isEqual(a[key], b[key])) {\n          return false;\n        }\n      }\n    }\n    // Look through all the keys in `b`. If `b` has a key that `a` does not, return false.\n    for (const key in b) {\n      if (!Object.prototype.hasOwnProperty.call(a, key)) {\n        return false;\n      }\n    }\n    // If we made it this far the objects are equal!\n    return true;\n  }\n  // Otherwise the values are not equal.\n  return false;\n}\n","import { isDevelopment, isTest } from './environment';\n\n// taken straight from https://github.com/substack/deep-freeze to avoid import hassles with rollup\nfunction deepFreeze(o: any) {\n  Object.freeze(o);\n\n  Object.getOwnPropertyNames(o).forEach(function(prop) {\n    if (\n      o.hasOwnProperty(prop) &&\n      o[prop] !== null &&\n      (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n      !Object.isFrozen(o[prop])\n    ) {\n      deepFreeze(o[prop]);\n    }\n  });\n\n  return o;\n}\n\nexport function maybeDeepFreeze(obj: any) {\n  if (isDevelopment() || isTest()) {\n    // Polyfilled Symbols potentially cause infinite / very deep recursion while deep freezing\n    // which is known to crash IE11 (https://github.com/apollographql/apollo-client/issues/3043).\n    const symbolIsPolyfilled =\n      typeof Symbol === 'function' && typeof Symbol('') === 'string';\n\n    if (!symbolIsPolyfilled) {\n      return deepFreeze(obj);\n    }\n  }\n  return obj;\n}\n","import { isProduction, isTest } from './environment';\n\nconst haveWarned = Object.create({});\n\n/**\n * Print a warning only once in development.\n * In production no warnings are printed.\n * In test all warnings are printed.\n *\n * @param msg The warning message\n * @param type warn or error (will call console.warn or console.error)\n */\nexport function warnOnceInDevelopment(msg: string, type = 'warn') {\n  if (isProduction()) {\n    return;\n  }\n  if (!haveWarned[msg]) {\n    if (!isTest()) {\n      haveWarned[msg] = true;\n    }\n    switch (type) {\n      case 'error':\n        console.error(msg);\n        break;\n      default:\n        console.warn(msg);\n    }\n  }\n}\n"],"names":["added"],"mappings":";;;;;;;;;;;;;;AA8CA,uBAA8B,KAAgB;IAC5C,OAAO,CAAC,aAAa,EAAE,cAAc,EAAE,WAAW,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;CAC9E;AAID,uBAA8B,KAAgB;IAC5C,OAAO,CAAC,UAAU,EAAE,YAAY,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;CAC5D;AAED,uBAAuB,KAAgB;IACrC,OAAO,KAAK,CAAC,IAAI,KAAK,aAAa,CAAC;CACrC;AAED,wBAAwB,KAAgB;IACtC,OAAO,KAAK,CAAC,IAAI,KAAK,cAAc,CAAC;CACtC;AAED,oBAAoB,KAAgB;IAClC,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC;CAClC;AAED,sBAAsB,KAAgB;IACpC,OAAO,KAAK,CAAC,IAAI,KAAK,YAAY,CAAC;CACpC;AAED,oBAAoB,KAAgB;IAClC,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU,CAAC;CAClC;AAED,uBAAuB,KAAgB;IACrC,OAAO,KAAK,CAAC,IAAI,KAAK,aAAa,CAAC;CACrC;AAED,qBAAqB,KAAgB;IACnC,OAAO,KAAK,CAAC,IAAI,KAAK,WAAW,CAAC;CACnC;AAED,qBAAqB,KAAgB;IACnC,OAAO,KAAK,CAAC,IAAI,KAAK,WAAW,CAAC;CACnC;AAED,qBAAqB,KAAgB;IACnC,OAAO,KAAK,CAAC,IAAI,KAAK,WAAW,CAAC;CACnC;AAED,qCACE,MAAW,EACX,IAAc,EACd,KAAgB,EAChB,SAAkB;IAElB,IAAI,UAAU,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE;QAC5C,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;KAC1C;SAAM,IAAI,cAAc,CAAC,KAAK,CAAC,IAAI,aAAa,CAAC,KAAK,CAAC,EAAE;QACxD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC;KAClC;SAAM,IAAI,aAAa,CAAC,KAAK,CAAC,EAAE;QAC/B,IAAM,cAAY,GAAG,EAAE,CAAC;QACxB,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,GAAG;YAClB,OAAA,2BAA2B,CAAC,cAAY,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC;SAAA,CAC1E,CAAC;QACF,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,cAAY,CAAC;KACnC;SAAM,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;QAC5B,IAAM,aAAa,GAAG,CAAC,SAAS,IAAK,EAAU,EAAE,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACnE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,aAAa,CAAC;KACpC;SAAM,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;QAC7B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,SAAS;YAC7C,IAAM,iBAAiB,GAAG,EAAE,CAAC;YAC7B,2BAA2B,CACzB,iBAAiB,EACjB,IAAI,EACJ,SAAS,EACT,SAAS,CACV,CAAC;YACF,OAAQ,iBAAyB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC/C,CAAC,CAAC;KACJ;SAAM,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;QAC7B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAI,KAAuB,CAAC,KAAK,CAAC;KACrD;SAAM,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;QAC7B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;KAC3B;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,2BAAwB,IAAI,CAAC,KAAK,qBAC/C,KAAa,CAAC,IAAI,qHAEkE,CAAC,CAAC;KAC1F;CACF;AAED,+BACE,KAAgB,EAChB,SAAkB;IAElB,IAAI,aAAa,GAAQ,IAAI,CAAC;IAC9B,IAAI,KAAK,CAAC,UAAU,EAAE;QACpB,aAAa,GAAG,EAAE,CAAC;QACnB,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS;YAChC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;YAEzC,IAAI,SAAS,CAAC,SAAS,EAAE;gBACvB,SAAS,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,EAAe;wBAAb,cAAI,EAAE,gBAAK;oBACxC,OAAA,2BAA2B,CACzB,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,EACnC,IAAI,EACJ,KAAK,EACL,SAAS,CACV;iBAAA,CACF,CAAC;aACH;SACF,CAAC,CAAC;KACJ;IAED,IAAI,MAAM,GAAQ,IAAI,CAAC;IACvB,IAAI,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE;QAC7C,MAAM,GAAG,EAAE,CAAC;QACZ,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,EAAe;gBAAb,cAAI,EAAE,gBAAK;YACpC,OAAA,2BAA2B,CAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC;SAAA,CAC5D,CAAC;KACH;IAED,OAAO,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE,aAAa,CAAC,CAAC;CACjE;AAQD,IAAM,gBAAgB,GAAa;IACjC,YAAY;IACZ,SAAS;IACT,MAAM;IACN,QAAQ;IACR,MAAM;IACN,QAAQ;CACT,CAAC;AAEF,yBACE,SAAiB,EACjB,IAAa,EACb,UAAuB;IAEvB,IACE,UAAU;QACV,UAAU,CAAC,YAAY,CAAC;QACxB,UAAU,CAAC,YAAY,CAAC,CAAC,KAAK,CAChC,EAAE;QACA,IACE,UAAU,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC;YACjC,UAAU,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAc,CAAC,MAAM,GAAG,CAC5D,EAAE;YACA,IAAM,UAAU,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC;kBAChD,UAAU,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAc;kBAChD,EAAE,CAAC;YACP,UAAU,CAAC,IAAI,EAAE,CAAC;YAElB,IAAM,WAAS,GAAG,IAA8B,CAAC;YACjD,IAAM,cAAY,GAAG,EAA4B,CAAC;YAClD,UAAU,CAAC,OAAO,CAAC,UAAA,GAAG;gBACpB,cAAY,CAAC,GAAG,CAAC,GAAG,WAAS,CAAC,GAAG,CAAC,CAAC;aACpC,CAAC,CAAC;YAEH,OAAU,UAAU,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,SAAI,IAAI,CAAC,SAAS,CACzD,cAAY,CACb,MAAG,CAAC;SACN;aAAM;YACL,OAAO,UAAU,CAAC,YAAY,CAAC,CAAC,KAAK,CAAC,CAAC;SACxC;KACF;IAED,IAAI,iBAAiB,GAAW,SAAS,CAAC;IAE1C,IAAI,IAAI,EAAE;QACR,IAAM,eAAe,GAAW,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QACrD,iBAAiB,IAAI,MAAI,eAAe,MAAG,CAAC;KAC7C;IAED,IAAI,UAAU,EAAE;QACd,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;YACjC,IAAI,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBAAE,OAAO;YACjD,IAAI,UAAU,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE;gBAC1D,iBAAiB,IAAI,MAAI,GAAG,SAAI,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,MAAG,CAAC;aACpE;iBAAM;gBACL,iBAAiB,IAAI,MAAI,GAAK,CAAC;aAChC;SACF,CAAC,CAAC;KACJ;IAED,OAAO,iBAAiB,CAAC;CAC1B;AAED,kCACE,KAAgC,EAChC,SAAiB;IAEjB,IAAI,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE;QAC7C,IAAM,QAAM,GAAW,EAAE,CAAC;QAC1B,KAAK,CAAC,SAAS,CAAC,OAAO,CAAC,UAAC,EAAe;gBAAb,cAAI,EAAE,gBAAK;YACpC,OAAA,2BAA2B,CAAC,QAAM,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC;SAAA,CAC5D,CAAC;QACF,OAAO,QAAM,CAAC;KACf;IAED,OAAO,IAAI,CAAC;CACb;AAED,gCAAuC,KAAgB;IACrD,OAAO,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC;CAC3D;AAED,iBAAwB,SAAwB;IAC9C,OAAO,SAAS,CAAC,IAAI,KAAK,OAAO,CAAC;CACnC;AAED,0BACE,SAAwB;IAExB,OAAO,SAAS,CAAC,IAAI,KAAK,gBAAgB,CAAC;CAC5C;AAED,mBAA0B,QAAoB;IAC5C,OAAO,QAAQ,IAAK,QAAgC,CAAC,IAAI,KAAK,IAAI,CAAC;CACpE;AAOD,mBACE,QAA2B,EAC3B,SAAiB;IAAjB,0BAAA,EAAA,iBAAiB;IAEjB,kBACE,IAAI,EAAE,IAAI,EACV,SAAS,WAAA,KACL,OAAO,QAAQ,KAAK,QAAQ;UAC5B,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE;UACrC,QAAQ,GACZ;CACH;AAED,qBAA4B,UAAsB;IAChD,QACE,UAAU,IAAI,IAAI;QAClB,OAAO,UAAU,KAAK,QAAQ;QAC7B,UAAkC,CAAC,IAAI,KAAK,MAAM,EACnD;CACH;AAED,kCAAkC,IAAkB;IAClD,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;CACtE;;;;AAOD,uBACE,IAAe,EACf,UAAoD;IAApD,2BAAA,EAAA,qCAAoD;IAEpD,QAAQ,IAAI,CAAC,IAAI;QACf,KAAK,UAAU;YACb,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1B,KAAK,WAAW;YACd,OAAO,IAAI,CAAC;QACd,KAAK,UAAU;YACb,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9B,KAAK,YAAY;YACf,OAAO,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChC,KAAK,WAAW;YACd,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,aAAa,CAAC,CAAC,EAAE,UAAU,CAAC,GAAA,CAAC,CAAC;QAC5D,KAAK,aAAa,EAAE;YAClB,IAAM,KAAK,GAA2B,EAAE,CAAC;YACzC,KAAoB,UAAW,EAAX,KAAA,IAAI,CAAC,MAAM,EAAX,cAAW,EAAX,IAAW;gBAA1B,IAAM,KAAK,SAAA;gBACd,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,aAAa,CAAC,KAAK,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;aAClE;YACD,OAAO,KAAK,CAAC;SACd;QACD;YACE,OAAO,IAAI,CAAC,KAAK,CAAC;KACrB;CACF;;mCCvTC,KAAgB,EAChB,SAAiB;IAEjB,IAAI,KAAK,CAAC,UAAU,IAAI,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE;QAC/C,IAAM,cAAY,GAAkB,EAAE,CAAC;QACvC,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,UAAC,SAAwB;YAChD,cAAY,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,wBAAwB,CAC3D,SAAS,EACT,SAAS,CACV,CAAC;SACH,CAAC,CAAC;QACH,OAAO,cAAY,CAAC;KACrB;IACD,OAAO,IAAI,CAAC;CACb;AAED,uBACE,SAAwB,EACxB,SAAuC;IAAvC,0BAAA,EAAA,cAAuC;IAEvC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE;QACzB,OAAO,IAAI,CAAC;KACb;IAED,IAAI,GAAG,GAAY,IAAI,CAAC;IACxB,SAAS,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS;;QAEpC,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,KAAK,MAAM,IAAI,SAAS,CAAC,IAAI,CAAC,KAAK,KAAK,SAAS,EAAE;;YAEzE,OAAO;SACR;;QAGD,IAAM,kBAAkB,GAAG,SAAS,CAAC,SAAS,IAAI,EAAE,CAAC;QACrD,IAAM,aAAa,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;QAC3C,IAAI,kBAAkB,CAAC,MAAM,KAAK,CAAC,EAAE;YACnC,MAAM,IAAI,KAAK,CACb,4CAA0C,aAAa,gBAAa,CACrE,CAAC;SACH;QAED,IAAM,UAAU,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;QACzC,IAAI,CAAC,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,EAAE;YACtD,MAAM,IAAI,KAAK,CAAC,+BAA6B,aAAa,gBAAa,CAAC,CAAC;SAC1E;QAED,IAAM,OAAO,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QAC5C,IAAI,WAAW,GAAY,KAAK,CAAC;QACjC,IAAI,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,KAAK,cAAc,EAAE;;YAE/C,IAAI,OAAO,CAAC,IAAI,KAAK,UAAU,EAAE;gBAC/B,MAAM,IAAI,KAAK,CACb,uBAAqB,aAAa,sDAAmD,CACtF,CAAC;aACH;iBAAM;gBACL,WAAW,GAAG,SAAS,CAAE,OAAwB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9D,IAAI,WAAW,KAAK,SAAS,EAAE;oBAC7B,MAAM,IAAI,KAAK,CACb,qCAAmC,aAAa,gBAAa,CAC9D,CAAC;iBACH;aACF;SACF;aAAM;YACL,WAAW,GAAI,OAA4B,CAAC,KAAK,CAAC;SACnD;QAED,IAAI,aAAa,KAAK,MAAM,EAAE;YAC5B,WAAW,GAAG,CAAC,WAAW,CAAC;SAC5B;QAED,IAAI,CAAC,WAAW,EAAE;YAChB,GAAG,GAAG,KAAK,CAAC;SACb;KACF,CAAC,CAAC;IAEH,OAAO,GAAG,CAAC;CACZ;AAED,2BAAkC,SAAwB;IACxD,IACE,CAAE,SAAuB,CAAC,YAAY;QACtC,EAAG,SAAuB,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAC/D;QACE,OAAO,CAAC,SAAS,CAAC,CAAC;IAErB,OAAO,CAAC,SAAS,CAAC,CAAC,MAAM,CACtB,SAAuB,CAAC,YAAY,CAAC,UAAU;SAC7C,GAAG,CAAC,UAAA,aAAa;QAChB,OAAA,CAAC,aAAa,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC,aAAa,CAAC,CAAC;KAAA,CACzD;SACA,MAAM,CAAC,UAAC,UAAU,EAAE,QAAQ,IAAK,OAAA,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAA,EAAE,EAAE,CAAC,CACrE,CAAC;CACH;AAED,IAAM,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;AACxB,2BAAkC,GAAiB;IACjD,IAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9B,IAAI,MAAM;QAAE,OAAO,MAAM,CAAC;;IAG1B,IAAM,UAAU,GAAG,GAAG,CAAC,WAAW;SAC/B,MAAM,CACL,UAAC,UAAmC;QAClC,OAAA,UAAU,CAAC,YAAY,IAAI,UAAU,CAAC,YAAY,CAAC,UAAU;KAAA,CAChE;SAEA,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,iBAAiB,CAAC,CAAQ,CAAC,GAAA,CAAC;SAErC,MAAM,CAAC,UAAC,UAAU,EAAE,QAAQ,IAAK,OAAA,UAAU,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAA,EAAE,EAAE,CAAC;SAEjE,MAAM,CACL,UAAC,SAAwB;QACvB,OAAA,SAAS,CAAC,UAAU,IAAI,SAAS,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC;KAAA,CAC1D;SAEA,GAAG,CAAC,UAAC,SAAwB,IAAK,OAAA,SAAS,CAAC,UAAU,GAAA,CAAC;SAEvD,MAAM,CAAC,UAAC,UAAU,EAAE,SAAS,IAAK,OAAA,UAAU,CAAC,MAAM,CAAC,SAAS,CAAC,GAAA,EAAE,EAAE,CAAC;SAEnE,GAAG,CAAC,UAAC,SAAwB,IAAK,OAAA,SAAS,CAAC,IAAI,CAAC,KAAK,GAAA,CAAC,CAAC;IAE3D,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;IAC3B,OAAO,UAAU,CAAC;CACnB;AAED,uBAA8B,KAAe,EAAE,GAAiB;IAC9D,OAAO,iBAAiB,CAAC,GAAG,CAAC,CAAC,IAAI,CAChC,UAAC,IAAY,IAAK,OAAA,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,GAAA,CAC3C,CAAC;CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5HD,kCACE,QAAsB,EACtB,YAAqB;IAErB,IAAI,kBAAkB,GAAG,YAAY,CAAC;;;;IAKtC,IAAM,SAAS,GAAkC,EAAE,CAAC;IACpD,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,UAAA,UAAU;;;QAGrC,IAAI,UAAU,CAAC,IAAI,KAAK,qBAAqB,EAAE;YAC7C,MAAM,IAAI,KAAK,CACb,aAAW,UAAU,CAAC,SAAS,mBAC7B,UAAU,CAAC,IAAI,GAAG,aAAW,UAAU,CAAC,IAAI,CAAC,KAAK,MAAG,GAAG,EAAE,QACxD;gBACF,yFAAyF,CAC5F,CAAC;SACH;;;QAGD,IAAI,UAAU,CAAC,IAAI,KAAK,oBAAoB,EAAE;YAC5C,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC5B;KACF,CAAC,CAAC;;;IAIH,IAAI,OAAO,kBAAkB,KAAK,WAAW,EAAE;QAC7C,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;YAC1B,MAAM,IAAI,KAAK,CACb,WACE,SAAS,CAAC,MAAM,sFACmE,CACtF,CAAC;SACH;QACD,kBAAkB,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;KAC9C;;;IAID,IAAM,KAAK,kBACN,QAAQ,IACX,WAAW;YACT;gBACE,IAAI,EAAE,qBAAqB;gBAC3B,SAAS,EAAE,OAAO;gBAClB,YAAY,EAAE;oBACZ,IAAI,EAAE,cAAc;oBACpB,UAAU,EAAE;wBACV;4BACE,IAAI,EAAE,gBAAgB;4BACtB,IAAI,EAAE;gCACJ,IAAI,EAAE,MAAM;gCACZ,KAAK,EAAE,kBAAkB;6BAC1B;yBACF;qBACF;iBACF;aACF;iBACE,QAAQ,CAAC,WAAW,IAE1B,CAAC;IAEF,OAAO,KAAK,CAAC;CACd;;gBCzEC,MAA8B;IAC9B,iBAAyC;SAAzC,UAAyC,EAAzC,qBAAyC,EAAzC,IAAyC;QAAzC,gCAAyC;;IAEzC,OAAO,CAAC,OAAO,CAAC,UAAA,MAAM;QACpB,IAAI,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,KAAK,IAAI,EAAE;YACpD,OAAO;SACR;QACD,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;YAC7B,MAAM,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;SAC3B,CAAC,CAAC;KACJ,CAAC,CAAC;IACH,OAAO,MAAM,CAAC;CACf;;+BCnBC,GAAiB;IAEjB,aAAa,CAAC,GAAG,CAAC,CAAC;IAEnB,IAAI,WAAW,GAAmC,GAAG,CAAC,WAAW,CAAC,MAAM,CACtE,UAAA,UAAU;QACR,OAAA,UAAU,CAAC,IAAI,KAAK,qBAAqB;YACzC,UAAU,CAAC,SAAS,KAAK,UAAU;KAAA,CACtC,CAAC,CAAC,CAA4B,CAAC;IAEhC,IAAI,CAAC,WAAW,EAAE;QAChB,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;KACxD;IAED,OAAO,WAAW,CAAC;CACpB;;AAGD,uBAA8B,GAAiB;IAC7C,IAAI,GAAG,CAAC,IAAI,KAAK,UAAU,EAAE;QAC3B,MAAM,IAAI,KAAK,CAAC,0JAC2D,CAAC,CAAC;KAC9E;IAED,IAAM,UAAU,GAAG,GAAG,CAAC,WAAW;SAC/B,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,IAAI,KAAK,oBAAoB,GAAA,CAAC;SAC5C,GAAG,CAAC,UAAA,UAAU;QACb,IAAI,UAAU,CAAC,IAAI,KAAK,qBAAqB,EAAE;YAC7C,MAAM,IAAI,KAAK,CACb,8DACE,UAAU,CAAC,IAAI,OACd,CACJ,CAAC;SACH;QACD,OAAO,UAAU,CAAC;KACnB,CAAC,CAAC;IAEL,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;QACzB,MAAM,IAAI,KAAK,CACb,0CAAwC,UAAU,CAAC,MAAM,gBAAa,CACvE,CAAC;KACH;CACF;AAED,gCACE,GAAiB;IAEjB,aAAa,CAAC,GAAG,CAAC,CAAC;IACnB,OAAO,GAAG,CAAC,WAAW,CAAC,MAAM,CAC3B,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,qBAAqB,GAAA,CACxD,CAAC,CAAC,CAA4B,CAAC;CACjC;AAED,qCACE,QAAsB;IAEtB,IAAM,GAAG,GAAG,sBAAsB,CAAC,QAAQ,CAAC,CAAC;IAC7C,IAAI,CAAC,GAAG,EAAE;QACR,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;KAC7D;IACD,OAAO,GAAG,CAAC;CACZ;AAED,0BAAiC,GAAiB;IAChD,QACE,GAAG,CAAC,WAAW;SACZ,MAAM,CACL,UAAA,UAAU;QACR,OAAA,UAAU,CAAC,IAAI,KAAK,qBAAqB,IAAI,UAAU,CAAC,IAAI;KAAA,CAC/D;SACA,GAAG,CAAC,UAAC,CAA0B,IAAK,OAAA,CAAC,CAAC,IAAI,CAAC,KAAK,GAAA,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,EAC/D;CACH;;AAGD,gCACE,GAAiB;IAEjB,OAAO,GAAG,CAAC,WAAW,CAAC,MAAM,CAC3B,UAAA,UAAU,IAAI,OAAA,UAAU,CAAC,IAAI,KAAK,oBAAoB,GAAA,CAC3B,CAAC;CAC/B;AAED,4BAAmC,GAAiB;IAClD,IAAM,QAAQ,GAAG,sBAAsB,CAAC,GAAG,CAA4B,CAAC;IAExE,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,SAAS,KAAK,OAAO,EAAE;QAC/C,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;KACrD;IAED,OAAO,QAAQ,CAAC;CACjB;AAED,+BACE,GAAiB;IAEjB,IAAI,GAAG,CAAC,IAAI,KAAK,UAAU,EAAE;QAC3B,MAAM,IAAI,KAAK,CAAC,0JAC2D,CAAC,CAAC;KAC9E;IAED,IAAI,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;QAC9B,MAAM,IAAI,KAAK,CAAC,4CAA4C,CAAC,CAAC;KAC/D;IAED,IAAM,WAAW,GAAG,GAAG,CAAC,WAAW,CAAC,CAAC,CAA2B,CAAC;IAEjE,IAAI,WAAW,CAAC,IAAI,KAAK,oBAAoB,EAAE;QAC7C,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;KACnD;IAED,OAAO,WAAqC,CAAC;CAC9C;;;;;;AAOD,2BACE,QAAsB;IAEtB,aAAa,CAAC,QAAQ,CAAC,CAAC;IAExB,IAAI,kBAAkB,CAAC;IAEvB,KAAuB,UAAoB,EAApB,KAAA,QAAQ,CAAC,WAAW,EAApB,cAAoB,EAApB,IAAoB;QAAtC,IAAI,UAAU,SAAA;QACjB,IAAI,UAAU,CAAC,IAAI,KAAK,qBAAqB,EAAE;YAC7C,IAAM,SAAS,GAAI,UAAsC,CAAC,SAAS,CAAC;YACpE,IACE,SAAS,KAAK,OAAO;gBACrB,SAAS,KAAK,UAAU;gBACxB,SAAS,KAAK,cAChB,EAAE;gBACA,OAAO,UAAqC,CAAC;aAC9C;SACF;QACD,IAAI,UAAU,CAAC,IAAI,KAAK,oBAAoB,IAAI,CAAC,kBAAkB,EAAE;;;YAGnE,kBAAkB,GAAG,UAAoC,CAAC;SAC3D;KACF;IAED,IAAI,kBAAkB,EAAE;QACtB,OAAO,kBAAkB,CAAC;KAC3B;IAED,MAAM,IAAI,KAAK,CACb,sFAAsF,CACvF,CAAC;CACH;;;AAWD,2BACE,SAAwC;IAAxC,0BAAA,EAAA,cAAwC;IAExC,IAAM,QAAQ,GAAgB,EAAE,CAAC;IACjC,SAAS,CAAC,OAAO,CAAC,UAAA,QAAQ;QACxB,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;KAC1C,CAAC,CAAC;IAEH,OAAO,QAAQ,CAAC;CACjB;AAED,0BACE,UAA+C;IAE/C,IACE,UAAU;QACV,UAAU,CAAC,mBAAmB;QAC9B,UAAU,CAAC,mBAAmB,CAAC,MACjC,EAAE;QACA,IAAM,aAAa,GAAG,UAAU,CAAC,mBAAmB;aACjD,MAAM,CAAC,UAAC,EAAgB;gBAAd,8BAAY;YAAO,OAAA,YAAY;SAAA,CAAC;aAC1C,GAAG,CAAC,UAAC,EAA0B;gBAAxB,sBAAQ,EAAE,8BAAY;YAC5B,IAAM,eAAe,GAAiC,EAAE,CAAC;YACzD,2BAA2B,CACzB,eAAe,EACf,QAAQ,CAAC,IAAI,EACb,YAAyB,CAC1B,CAAC;YAEF,OAAO,eAAe,CAAC;SACxB,CAAC,CAAC;QAEL,OAAO,MAAM,gBAAC,EAAE,SAAK,aAAa,GAAE;KACrC;IAED,OAAO,EAAE,CAAC;CACX;;;;AAKD,8BACE,SAAkC;IAElC,IAAM,KAAK,GAAG,IAAI,GAAG,EAAU,CAAC;IAChC,IAAI,SAAS,CAAC,mBAAmB,EAAE;QACjC,KAAyB,UAA6B,EAA7B,KAAA,SAAS,CAAC,mBAAmB,EAA7B,cAA6B,EAA7B,IAA6B;YAAjD,IAAM,UAAU,SAAA;YACnB,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC3C;KACF;IAED,OAAO,KAAK,CAAC;CACd;;ACjOD;;;AAGA,mBAA6B,KAAQ;;IAEnC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;QACxB,OAAO,KAAK,CAAC,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,SAAS,CAAC,IAAI,CAAC,GAAA,CAAQ,CAAC;KAClD;;;IAGD,IAAI,KAAK,KAAK,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC/C,IAAM,SAAS,GAAQ,EAAE,CAAC;QAC1B,KAAK,IAAM,GAAG,IAAI,KAAK,EAAE;YACvB,IAAI,KAAK,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC7B,SAAS,CAAC,GAAG,CAAC,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;aACxC;SACF;QACD,OAAO,SAAS,CAAC;KAClB;;;IAGD,OAAO,KAAK,CAAC;CACd;;ACDD,IAAM,cAAc,GAAc;IAChC,IAAI,EAAE,OAAO;IACb,IAAI,EAAE;QACJ,IAAI,EAAE,MAAM;QACZ,KAAK,EAAE,YAAY;KACpB;CACF,CAAC;AAEF,oBACE,EAAoD,EACpD,SAAsB;;IAGtB,QACE,EAAE,CAAC,YAAY,CAAC,UAAU,CAAC,MAAM,CAC/B,UAAA,YAAY;;QAEV,OAAA,EAEE,YAAY;;YAEZ,YAAY,CAAC,IAAI,KAAK,gBAAgB;;YAEtC,CAAC,UAAU,CAAC,SAAS,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,SAAS,CAAC,CAC3D;KAAA,CACJ,CAAC,MAAM,GAAG,CAAC,EACZ;CACH;AAED,6BACE,UAA0D;IAE1D,OAAO,0BAA0B,SAAwB;QACvD,OAAO,UAAU,CAAC,IAAI,CACpB,UAAC,GAA+C;YAC9C,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK;gBAAE,OAAO,IAAI,CAAC;YAC/D,IAAI,GAAG,CAAC,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC;gBAAE,OAAO,IAAI,CAAC;YACjD,OAAO,KAAK,CAAC;SACd,CACF,CAAC;KACH,CAAC;CACH;AAED,mCACE,YAA8B,EAC9B,MAAc;IAAd,uBAAA,EAAA,cAAc;IAEd,IAAI,YAAY,CAAC,UAAU,EAAE;QAC3B,IAAI,CAAC,MAAM,EAAE;YACX,IAAM,mBAAmB,GAAG,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,UAAA,SAAS;gBAChE,QACE,SAAS,CAAC,IAAI,KAAK,OAAO;oBACzB,SAAuB,CAAC,IAAI,CAAC,KAAK,KAAK,YAAY,EACpD;aACH,CAAC,CAAC;YAEH,IAAI,CAAC,mBAAmB,EAAE;gBACxB,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;aAC9C;SACF;QAED,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS;;YAEvC,IAAI,SAAS,CAAC,IAAI,KAAK,OAAO,EAAE;gBAC9B,IACE,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC;oBAC/C,SAAS,CAAC,YACZ,EAAE;oBACA,yBAAyB,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;iBACnD;aACF;iBAAM,IAAI,SAAS,CAAC,IAAI,KAAK,gBAAgB,EAAE;gBAC9C,IAAI,SAAS,CAAC,YAAY,EAAE;oBAC1B,yBAAyB,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;iBACnD;aACF;SACF,CAAC,CAAC;KACJ;CACF;AAQD,0CACE,UAAmC,EACnC,YAA8B;IAE9B,IAAI,CAAC,YAAY,CAAC,UAAU;QAAE,OAAO,YAAY,CAAC;;IAElD,IAAM,eAAe,GAAG,UAAU,CAAC,IAAI,CACrC,UAAC,GAA0B,IAAK,OAAA,GAAG,CAAC,MAAM,GAAA,CAC3C,CAAC;IAEF,YAAY,CAAC,UAAU,GAAG,YAAY,CAAC,UAAU;SAC9C,GAAG,CAAC,UAAA,SAAS;QACZ,IACE,SAAS,CAAC,IAAI,KAAK,OAAO;YAC1B,CAAE,SAAuB;YACzB,CAAC,SAAS,CAAC,UACb;YACE,OAAO,SAAS,CAAC;QACnB,IAAM,gBAAgB,GAAG,mBAAmB,CAAC,UAAU,CAAC,CAAC;QACzD,IAAI,MAAe,CAAC;QACpB,SAAS,CAAC,UAAU,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,UAAA,SAAS;YAC1D,IAAM,UAAU,GAAG,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;YAEhD,IAAI,CAAC,MAAM,IAAI,CAAC,UAAU,IAAI,eAAe;gBAAE,MAAM,GAAG,IAAI,CAAC;YAE7D,OAAO,UAAU,CAAC;SACnB,CAAC,CAAC;QAEH,OAAO,MAAM,GAAG,IAAI,GAAG,SAAS,CAAC;KAClC,CAAC;SACD,MAAM,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,CAAC,GAAA,CAAC,CAAC;IAEpB,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,UAAA,SAAS;QACvC,IACE,CAAC,SAAS,CAAC,IAAI,KAAK,OAAO,IAAI,SAAS,CAAC,IAAI,KAAK,gBAAgB;YAClE,SAAS,CAAC,YACZ,EAAE;YACA,gCAAgC,CAAC,UAAU,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC;SACtE;KACF,CAAC,CAAC;IAEH,OAAO,YAAY,CAAC;CACrB;AAED,sCACE,UAAmC,EACnC,GAAiB;IAEjB,IAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;IAEhC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,UAA0B;QACtD,gCAAgC,CAC9B,UAAU,EACT,UAAsC,CAAC,YAAY,CACrD,CAAC;KACH,CAAC,CAAC;IACH,IAAM,SAAS,GAAG,2BAA2B,CAAC,QAAQ,CAAC,CAAC;IACxD,IAAM,SAAS,GAAG,iBAAiB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtE,OAAO,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,GAAG,QAAQ,GAAG,IAAI,CAAC;CAC3D;AAED,IAAMA,OAAK,GAAG,IAAI,GAAG,EAAE,CAAC;AACxB,+BAAsC,GAAiB;IACrD,aAAa,CAAC,GAAG,CAAC,CAAC;IACnB,IAAM,MAAM,GAAGA,OAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9B,IAAI,MAAM;QAAE,OAAO,MAAM,CAAC;IAE1B,IAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;IAEhC,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,UAAC,UAA0B;QACtD,IAAM,MAAM,GAAG,UAAU,CAAC,IAAI,KAAK,qBAAqB,CAAC;QACzD,yBAAyB,CACtB,UAAsC,CAAC,YAAY,EACpD,MAAM,CACP,CAAC;KACH,CAAC,CAAC;IAEHA,OAAK,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACzB,OAAO,QAAQ,CAAC;CACjB;AAED,IAAM,sBAAsB,GAAG;IAC7B,IAAI,EAAE,UAAC,SAAwB;QAC7B,IAAM,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,KAAK,KAAK,YAAY,CAAC;QACzD,IAAI,UAAU,EAAE;YACd,IACE,CAAC,SAAS,CAAC,SAAS;gBACpB,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,GAAA,CAC3D,EAAE;gBACA,OAAO,CAAC,IAAI,CACV,wEAAwE;oBACtE,+DAA+D,CAClE,CAAC;aACH;SACF;QAED,OAAO,UAAU,CAAC;KACnB;CACF,CAAC;AACF,IAAM,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;AAC1B,+CAAsD,GAAiB;IACrE,aAAa,CAAC,GAAG,CAAC,CAAC;IACnB,IAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAChC,IAAI,MAAM;QAAE,OAAO,MAAM,CAAC;IAC1B,IAAM,QAAQ,GAAG,4BAA4B,CAAC,CAAC,sBAAsB,CAAC,EAAE,GAAG,CAAC,CAAC;IAC7E,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IAC3B,OAAO,QAAQ,CAAC;CACjB;AAOD,qCACE,UAAgC,EAChC,YAA8B,EAC9B,WAAkB;IAAlB,4BAAA,EAAA,kBAAkB;IAElB,IAAI,EAAE,YAAY,IAAI,YAAY,CAAC,UAAU,CAAC,EAAE;QAC9C,OAAO,KAAK,CAAC;KACd;IACD,IAAM,iBAAiB,GAAG,YAAY,CAAC,UAAU,CAAC,MAAM,CAAC,UAAA,SAAS;QAChE,OAAO,wBAAwB,CAAC,UAAU,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC;KACrE,CAAC,CAAC;IACH,OAAO,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC;CACrC;AAED,kCACE,UAAgC,EAChC,SAAwB,EACxB,WAAkB;IAAlB,4BAAA,EAAA,kBAAkB;IAElB,IAAI,SAAS,CAAC,IAAI,KAAK,OAAO,IAAI,CAAE,SAAuB,EAAE;QAC3D,OAAO,IAAI,CAAC;KACb;IAED,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE;QACzB,OAAO,KAAK,CAAC;KACd;IACD,IAAM,gBAAgB,GAAG,mBAAmB,CAAC,UAAU,CAAC,CAAC;IACzD,IAAM,iBAAiB,GAAG,SAAS,CAAC,UAAU,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC;IACxE,QACE,iBAAiB,CAAC,MAAM,GAAG,CAAC;SAC3B,WAAW;YACV,2BAA2B,CACzB,UAAU,EACV,SAAS,CAAC,YAAY,EACtB,WAAW,CACZ,CAAC,EACJ;CACH;AAED,uCACE,UAAgC,EAChC,YAA8B;IAE9B,YAAY,CAAC,UAAU,GAAG,YAAY,CAAC,UAAU;SAC9C,MAAM,CAAC,UAAA,SAAS;QACf,OAAO,wBAAwB,CAAC,UAAU,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;KAC9D,CAAC;SACD,GAAG,CAAC,UAAA,SAAS;QACZ,IAAI,wBAAwB,CAAC,UAAU,EAAE,SAAS,EAAE,KAAK,CAAC,EAAE;YAC1D,OAAO,SAAS,CAAC;SAClB;QACD,IACE,CAAC,SAAS,CAAC,IAAI,KAAK,OAAO,IAAI,SAAS,CAAC,IAAI,KAAK,gBAAgB;YAClE,SAAS,CAAC,YACZ,EAAE;YACA,SAAS,CAAC,YAAY,GAAG,6BAA6B,CACpD,UAAU,EACV,SAAS,CAAC,YAAY,CACvB,CAAC;SACH;QACD,OAAO,SAAS,CAAC;KAClB,CAAC,CAAC;IACL,OAAO,YAAY,CAAC;CACrB;AAED,mCACE,UAAgC,EAChC,GAAiB,EACjB,mBAA2B;IAA3B,oCAAA,EAAA,2BAA2B;IAE3B,aAAa,CAAC,GAAG,CAAC,CAAC;IACnB,IAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;IAChC,QAAQ,CAAC,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,UAAU;QACxD,IACE,CAAC,UAAU,CAAC,IAAI,KAAK,qBAAqB;aACvC,UAAU,CAAC,IAAI,KAAK,oBAAoB,IAAI,CAAC,mBAAmB,CAAC;YACpE,UAAU,CAAC,YACb,EAAE;YACA,UAAU,CAAC,YAAY,GAAG,6BAA6B,CACrD,UAAU,EACV,UAAU,CAAC,YAAY,CACxB,CAAC;SACH;QACD,OAAO,UAAU,CAAC;KACnB,CAAC,CAAC;IAEH,IAAM,SAAS,GAAG,2BAA2B,CAAC,QAAQ,CAAC,CAAC;IACxD,IAAM,SAAS,GAAG,iBAAiB,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC,CAAC;IACtE,OAAO,UAAU,CAAC,SAAS,EAAE,SAAS,CAAC,GAAG,QAAQ,GAAG,IAAI,CAAC;CAC3D;;;ICpTC,IAAI,OAAO,OAAO,KAAK,WAAW,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE;QAC1D,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;KAC7B;;IAGD,OAAO,aAAa,CAAC;CACtB;AAED,eAAsB,GAAW;IAC/B,OAAO,MAAM,EAAE,KAAK,GAAG,CAAC;CACzB;AAED;IACE,OAAO,KAAK,CAAC,YAAY,CAAC,KAAK,IAAI,CAAC;CACrC;AAED;IACE,OAAO,KAAK,CAAC,aAAa,CAAC,KAAK,IAAI,CAAC;CACtC;AAED;IACE,OAAO,KAAK,CAAC,MAAM,CAAC,KAAK,IAAI,CAAC;CAC/B;;+BCrBqC,CAAW;IAC/C,IAAI;QACF,OAAO,CAAC,EAAE,CAAC;KACZ;IAAC,OAAO,CAAC,EAAE;QACV,IAAI,OAAO,CAAC,KAAK,EAAE;YACjB,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;SAClB;KACF;CACF;AAED,+BAAsC,MAAuB;IAC3D,OAAO,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC;CAC9C;;ACdD;;;AAGA,iBAAwB,CAAM,EAAE,CAAM;;IAEpC,IAAI,CAAC,KAAK,CAAC,EAAE;QACX,OAAO,IAAI,CAAC;KACb;;IAED,IAAI,CAAC,YAAY,IAAI,IAAI,CAAC,YAAY,IAAI,EAAE;QAC1C,OAAO,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC;KACpC;;;IAGD,IACE,CAAC,IAAI,IAAI;QACT,OAAO,CAAC,KAAK,QAAQ;QACrB,CAAC,IAAI,IAAI;QACT,OAAO,CAAC,KAAK,QACf,EAAE;;;QAGA,KAAK,IAAM,GAAG,IAAI,CAAC,EAAE;YACnB,IAAI,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;gBAChD,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;oBACjD,OAAO,KAAK,CAAC;iBACd;gBACD,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;oBAC5B,OAAO,KAAK,CAAC;iBACd;aACF;SACF;;QAED,KAAK,IAAM,GAAG,IAAI,CAAC,EAAE;YACnB,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;gBACjD,OAAO,KAAK,CAAC;aACd;SACF;;QAED,OAAO,IAAI,CAAC;KACb;;IAED,OAAO,KAAK,CAAC;CACd;;ACzCD;AACA,oBAAoB,CAAM;IACxB,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAEjB,MAAM,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,UAAS,IAAI;QACjD,IACE,CAAC,CAAC,cAAc,CAAC,IAAI,CAAC;YACtB,CAAC,CAAC,IAAI,CAAC,KAAK,IAAI;aACf,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,UAAU,CAAC;YAC9D,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAC1B,EAAE;YACA,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;SACrB;KACF,CAAC,CAAC;IAEH,OAAO,CAAC,CAAC;CACV;AAED,yBAAgC,GAAQ;IACtC,IAAI,aAAa,EAAE,IAAI,MAAM,EAAE,EAAE;;;QAG/B,IAAM,kBAAkB,GACtB,OAAO,MAAM,KAAK,UAAU,IAAI,OAAO,MAAM,CAAC,EAAE,CAAC,KAAK,QAAQ,CAAC;QAEjE,IAAI,CAAC,kBAAkB,EAAE;YACvB,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;SACxB;KACF;IACD,OAAO,GAAG,CAAC;CACZ;;AC9BD,IAAM,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;;;;;;;;;AAUrC,+BAAsC,GAAW,EAAE,IAAa;IAAb,qBAAA,EAAA,aAAa;IAC9D,IAAI,YAAY,EAAE,EAAE;QAClB,OAAO;KACR;IACD,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;QACpB,IAAI,CAAC,MAAM,EAAE,EAAE;YACb,UAAU,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;SACxB;QACD,QAAQ,IAAI;YACV,KAAK,OAAO;gBACV,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,MAAM;YACR;gBACE,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SACrB;KACF;CACF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}